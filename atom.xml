<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一路追梦想</title>
  
  <subtitle>热爱技术，更热爱生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://picksomething.cn/"/>
  <updated>2018-04-24T11:45:33.995Z</updated>
  <id>http://picksomething.cn/</id>
  
  <author>
    <name>picksomething</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>新世界</title>
    <link href="http://picksomething.cn/2018/04/24/%E6%96%B0%E4%B8%96%E7%95%8C/"/>
    <id>http://picksomething.cn/2018/04/24/新世界/</id>
    <published>2018-04-24T11:34:20.000Z</published>
    <updated>2018-04-24T11:45:33.995Z</updated>
    
    <content type="html"><![CDATA[<p>终于将博客换成hexo+github page了，真的是不折腾会死。。。我发誓再也不折腾了<br><img src="p7ohyql3p.bkt.clouddn.com/static/images/static/testimg.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;终于将博客换成hexo+github page了，真的是不折腾会死。。。我发誓再也不折腾了&lt;br&gt;&lt;img src=&quot;p7ohyql3p.bkt.clouddn.com/static/images/static/testimg.jpg&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="Twitter" scheme="http://picksomething.cn/categories/Twitter/"/>
    
    
      <category term="博客" scheme="http://picksomething.cn/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="http://picksomething.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>iOS不显示LaunchScreen上的图片</title>
    <link href="http://picksomething.cn/2018/03/06/iOS%E4%B8%8D%E6%98%BE%E7%A4%BALaunchScreen%E4%B8%8A%E7%9A%84%E5%9B%BE%E7%89%87/"/>
    <id>http://picksomething.cn/2018/03/06/iOS不显示LaunchScreen上的图片/</id>
    <published>2018-03-06T03:38:27.000Z</published>
    <updated>2018-04-24T07:46:37.427Z</updated>
    
    <content type="html"><![CDATA[<p>因为并没有学习过iOS开发，现在用的react native开发的app，iOS和Android App上的启动屏都是原生代码实现的，现在新版启动屏ui图片有变化，然后技术主管又休假了，只能自己研究研究了。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>大概网上搜索学习了解了一下iOS的项目结构和程序入口，知道了LaunchScreen.storyboard是iOS的启动屏，AppDelegate是程序入口，于是就开始比着葫芦画瓢，将启动屏需要的图片资源添加到Images.scassets里面的splash文件夹里面，每个图片位置按照设计稿调整了一下，看效果图感觉差不多了，就开始跑一下试试，结果启动屏除了设置的背景颜色，上面的图片都没有显示。这就奇怪了，预览图上都有，怎么会不显示。。</p></blockquote><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><blockquote><p>于是开始google，看来也有很多人遇到这种问题，有的说卸载重新安装就好了，试了没用；有的说把配置里面的Launch Screen File置空，试了还是没用；还有的说是因为Images.xcassets里面的图片应用启动的时候还没有以引用，把图片放到项目根目录就好了，我差点就信这个准备试试了，但是一想之前的图片都在这里面放着都是可以的，肯定不是这个问题，思来想去决定卸载重启试试，重启之后再安装启动，神奇般地显示启动屏上的图片了。。果然是重启大法好啊</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为并没有学习过iOS开发，现在用的react native开发的app，iOS和Android App上的启动屏都是原生代码实现的，现在新版启动屏ui图片有变化，然后技术主管又休假了，只能自己研究研究了。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; cla
      
    
    </summary>
    
      <category term="IOS" scheme="http://picksomething.cn/categories/IOS/"/>
    
    
  </entry>
  
  <entry>
    <title>js函数调用的一些困惑</title>
    <link href="http://picksomething.cn/2017/09/28/js%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9B%B0%E6%83%91/"/>
    <id>http://picksomething.cn/2017/09/28/js函数调用的一些困惑/</id>
    <published>2017-09-28T07:07:21.000Z</published>
    <updated>2018-04-24T07:46:37.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="絮叨"><a href="#絮叨" class="headerlink" title="絮叨"></a>絮叨</h2><p>习惯了写java代码，然后开始学习js的时候，一开始总是会被js函数调用搞得有点晕乎，觉得有必要搞清楚js中函数调用不同的写法的一些含义和区别</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>要搞清楚js中函数调用为什么会这样，首先需要明白js中的一个概念，那就是：</p><ul><li><p>函数是<code>JavaScript</code>中的”一等公民”<code>(Function is first-class citizen)</code></p><p>当你能够传递，返回和分配某个类型的时，那这个类型就被称为”一等公民”，js中的函数恰好就满足这些条件，所以js中的函数被称为是”一等公民”</p><p>好了，不管js中函数是几等公民了，直接上代码来解决疑惑吧，假设我们页面中有一个按钮，点击的时候调用函数打印<code>Hello World</code>，函数代码如下：</p><pre><code>function hello(){document.write(&apos;Hello World&apos;);</code></pre><p>}<br><code>&lt;/pre&gt;看起来这段代码规规矩矩，没有什么问题，然后我们希望在一个组件被按压的时候调用这个函数，通常习惯了Java中函数调用的，可能顺手就是：</code>onPress = hello();`<br>这对于习惯了java的人来说，可能觉得再普通不过了，但是对于js来说是有问题的。</p><a id="more"></a><blockquote><p><strong>如果我们希望组件在按压的时候输出这句话，很显然上面的调用方式是做不到的，因为上面这种写法，会在组件被渲染或者被加载的时候就会调用<code>hello</code>这个方法从而输出<code>Hello World</code>，也就是说如果带括号就表示该函数会被立即调用执行，并将返回值赋给<code>onPress</code>，而且当你再按压组件的时候也并不会再继续调用了(你可以试试)，这显然并不是你想要的结果</strong><br>那么如何达到想要的结果呢？这样写就可以了<br><code>onPress = hello</code><br><strong>这看起来是将函数赋值给<code>onPress</code>啊，是的，确切地说js中函数也是对象，这里就是将改函数对象的引用或者说是入口地址赋值给<code>onPress</code>，然后在我们按压组件触发onPress动作的时候，就会真正地调用<code>hello</code>函数，打印出<code>Hello World</code></strong><br>第二种做法等同于下面这样：</p></blockquote><p><pre>`var hi = funtion hello(){</pre></p><pre><code>document.write(&apos;Hello World&apos;);</code></pre><p>}<br>onPress = hi;<br>通过hi();这种也是相当于直接调用hello函数<br><code>&lt;/pre&gt;这样看起来可能更直观一些，也就是先将函数赋值给一个变量，然后把该变量(指向函数的一个引用变量)赋值给</code>onPress<code>函数，因为</code>onPress<code>也是一个普通的函数，可以给它赋一个值，也可以给它赋一个函数，所以如果直接是第一种做法的话，就相当于把</code>hello<code>函数的返回值(虽然这里并没有显式的返回值)赋值给</code>onPress<code>了，自然达不到你想要按压组件调用函数输出</code>Hello World<code>的效果了当然再延伸一点就到ES6引进的箭头函数了(这里就不多说了)：&lt;pre&gt;</code>hi = () =&gt; {</p><pre><code>document.write(&apos;Hello World&apos;);</code></pre><p>}<br>onPress = hi;</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>js还真是风骚啊。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;絮叨&quot;&gt;&lt;a href=&quot;#絮叨&quot; class=&quot;headerlink&quot; title=&quot;絮叨&quot;&gt;&lt;/a&gt;絮叨&lt;/h2&gt;&lt;p&gt;习惯了写java代码，然后开始学习js的时候，一开始总是会被js函数调用搞得有点晕乎，觉得有必要搞清楚js中函数调用不同的写法的一些含义和区别&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;p&gt;要搞清楚js中函数调用为什么会这样，首先需要明白js中的一个概念，那就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;函数是&lt;code&gt;JavaScript&lt;/code&gt;中的”一等公民”&lt;code&gt;(Function is first-class citizen)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当你能够传递，返回和分配某个类型的时，那这个类型就被称为”一等公民”，js中的函数恰好就满足这些条件，所以js中的函数被称为是”一等公民”&lt;/p&gt;
&lt;p&gt;好了，不管js中函数是几等公民了，直接上代码来解决疑惑吧，假设我们页面中有一个按钮，点击的时候调用函数打印&lt;code&gt;Hello World&lt;/code&gt;，函数代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function hello(){
document.write(&amp;apos;Hello World&amp;apos;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;br&gt;&lt;code&gt;&amp;lt;/pre&amp;gt;
看起来这段代码规规矩矩，没有什么问题，然后我们希望在一个组件被按压的时候调用这个函数，通常习惯了Java中函数调用的，可能顺手就是：&lt;/code&gt;onPress = hello();`&lt;br&gt;这对于习惯了java的人来说，可能觉得再普通不过了，但是对于js来说是有问题的。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://picksomething.cn/categories/JavaScript/"/>
    
    
      <category term="js" scheme="http://picksomething.cn/tags/js/"/>
    
      <category term="funtion" scheme="http://picksomething.cn/tags/funtion/"/>
    
      <category term="对象" scheme="http://picksomething.cn/tags/%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>React native基础之箭头函数</title>
    <link href="http://picksomething.cn/2017/09/26/React%20native%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    <id>http://picksomething.cn/2017/09/26/React native基础之箭头函数/</id>
    <published>2017-09-26T04:39:19.000Z</published>
    <updated>2018-04-24T07:46:37.428Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们知道ES6允许使用“箭头”（=&gt;）定义函数，习惯Java中函数定义之后，刚开始接触js，每次看到箭头函数都感觉怪怪的，那么为什么ES6要引入箭头函数呢，这个问题也一直困扰这我，虽然只要明白了箭头函数的语法，基本就可以正常的学习rn，使用rn开始开发，但是有些东西搞不清楚，心里头就感觉不踏实，今天咨询了一下做前后端开发的大学室友，才稍微明白了一点</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><ul><li><p>引入箭头函数的原因</p><pre><code>*   一是更简短的函数书写</code></pre><ul><li>二是对this的词法解析</li></ul></li><li><p><strong>更短的函数书写</strong></p><p>这个其实很好理解，看下面的一段代码：</p><pre><code>// 正常函数写法</code></pre><p>[1,2,3].map(function (x) {</p><pre><code>return x * x;</code></pre><p>});<br>// 箭头函数写法<br>[1,2,3].map(x =&gt; x * x);<br>`</p><blockquote><p>上面的箭头函数的第二种写法里面的<code>x =&amp;gt; x * x</code>是等价于<code>(x) =&amp;gt; {return x * x}</code>,一个参数的时候小括号可以省略，后面的大括号如果省略的话，代表是一个隐式的返回值，具体这个箭头函数的语法可以看第一篇基础总结里面有提到</p></blockquote></li><li><strong>对this的词法解释(不绑定自己的 this，arguments，super)</strong><a id="more"></a>这个相对于第一点，就不太好理解了，因为设计到this关键字，这个本身也是js语法的一个难点和痛点，js的this和java中的并不一样，所以对于初学者很容易被this搞的晕头转向，这里先不细说this，打算下一篇写写this关键字，先看测试代码吧<br><pre>`render() {<br>return (<br>  &lt;View style={styles.container}&gt;<pre><code>&amp;lt;Button  onPress={this.onPressNormal}  title=&quot;调用普通函数&quot;  color=&quot;#841584&quot;/&amp;gt;&amp;lt;Button  onPress={this.onPressArrow}  title=&quot;调用箭头函数&quot;  color=&quot;#841584&quot;/&amp;gt;</code></pre>  &lt;/View&gt;<br>);<br>}<br>onPressNormal() {<br>console.log(‘function normal :’, this);<br>//console.log(‘function this state testFlag :’, this.state.testFlag);<br>}<br>onPressArrow = () =&gt; {<br>console.log(‘function arrow:’, this);<br>//console.log(‘function this state testFlag :’, this.state.testFlag);<br>}<br><code>&lt;/pre&gt;在上面的两个方法中，你会发现打印输出的this对象并不一样&lt;pre&gt;</code>ReactNativeJS: ‘function normal :’, { accessibilityComponentType: ‘button’,<br>ReactNativeJS: ‘function arrow:’, { props: { rootTag: 1 }<br>`</pre><blockquote><p>上面两个通过不同语法定义的方法，一个this对象指向的是button本身，一个指向的是该方法定义所在的全局对象，这样说可能并不直观，那我们进一步改一下上面两个方法输出，我在构造函数里面先定义一个state状态变量testFlag，默认值为false，然后在两个方法中分别输出该state变量:</p></blockquote><pre>`onPressNormal() {<br>//console.log(‘function normal :’, this);<br>console.log(‘function this state testFlag :’, this.state.testFlag);<br>}<br>onPressArrow = () =&gt; {<br>//console.log(‘function arrow:’, this);<br>console.log(‘function this state testFlag :’, this.state.testFlag);<br>}</pre></li></ul><p>你会发现箭头函数输出如下：<br><code>ReactNativeJS: &#39;function this state testFlag :&#39;, false</code></p><pre><code>但是普通定义的函数就直接error了，提示：</code></pre><p><code>undefined is not an object(evaluting &#39;this.state.testFlag&#39;)</code></p><pre><code>&gt; 同样的输出，只是不同的函数定义，在这种情况下差别就体现出来了，造成这的原因也就是函数里面的this指代的对象是不一样的，这也是引入箭头函数的第二个原因，&lt;b&gt;箭头函数会捕获其所在的上下文的this对象，作为自己的this值，从而确保代码运行结果和你期望的的结果一致&lt;b&gt;，当然你如果确实习惯了java这种方法定义，不喜欢用箭头函数，那么通过bind绑定this也是可以解决的</code></pre><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>这就是箭头函数带来的两个比较大的改变，但是使用箭头函数的时候也有几点需要注意的：</p><ul><li>this对象的指向是可变的，但是在箭头函数中，它是固定的，函数体内的this对象，绑定定义时所在的对象，而不是使用时所在的对象</li><li>不可以当作构造函数，不可以使用new命令</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们知道ES6允许使用“箭头”（=&amp;gt;）定义函数，习惯Java中函数定义之后，刚开始接触js，每次看到箭头函数都感觉怪怪的，那么为什么ES6要引入箭头函数呢，这个问题也一直困扰这我，虽然只要明白了箭头函数的语法，基本就可以正常的学习rn，使用rn开始开发，但是有些东西搞不清楚，心里头就感觉不踏实，今天咨询了一下做前后端开发的大学室友，才稍微明白了一点&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;引入箭头函数的原因&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   一是更简短的函数书写
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;二是对this的词法解析&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;更短的函数书写&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个其实很好理解，看下面的一段代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 正常函数写法
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[1,2,3].map(function (x) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return x * x;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;});&lt;br&gt;// 箭头函数写法&lt;br&gt;[1,2,3].map(x =&amp;gt; x * x);&lt;br&gt;`&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上面的箭头函数的第二种写法里面的&lt;code&gt;x =&amp;amp;gt; x * x&lt;/code&gt;是等价于&lt;code&gt;(x) =&amp;amp;gt; {return x * x}&lt;/code&gt;,一个参数的时候小括号可以省略，后面的大括号如果省略的话，代表是一个隐式的返回值，具体这个箭头函数的语法可以看第一篇基础总结里面有提到&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对this的词法解释(不绑定自己的 this，arguments，super)&lt;/strong&gt;
    
    </summary>
    
      <category term="React native" scheme="http://picksomething.cn/categories/React-native/"/>
    
    
      <category term="js" scheme="http://picksomething.cn/tags/js/"/>
    
      <category term="React native" scheme="http://picksomething.cn/tags/React-native/"/>
    
  </entry>
  
  <entry>
    <title>React native基础之调用Android本地方法</title>
    <link href="http://picksomething.cn/2017/09/18/React%20native%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%B0%83%E7%94%A8Android%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95/"/>
    <id>http://picksomething.cn/2017/09/18/React native基础之调用Android本地方法/</id>
    <published>2017-09-18T11:04:06.000Z</published>
    <updated>2018-04-24T08:02:05.445Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习了一周React native之后，感觉还挺有意思的，今天来说说通过React native调用Android平台的一些本地方法(API)，以我目前的水平，感觉这个功能可能平时用的不会太多，但我感觉通过React native开发Android应用的过程中肯定会有用到的时候，本文以调用Android平台的Toast为例来讲讲如何通过React native调用Android<br>原生的一些方法(API)。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>下面开始项目从创建到运行成功的全过程</p><ul><li><p>创建项目</p><p><code>react-native init CallNativeToast</code></p><p></p></li><li><p></p><p>创建一个NativeModule</p><p>本地模块一般是继承ReactContextBaseJavaModule的Java类，然后实现React native(js)调用Android本地API所需的功能，我们这次目标是通过js调用Android来展示一个Toast，代码如下：</p><pre><code>public class ToastModule extends ReactContextBaseJavaModule {</code></pre><p>private static final String DURATION_SHORT_KEY = “SHORT”;<br>private static final String DURATION_LONG_KEY = “LONG”;<br>public ToastModule(ReactApplicationContext reactContext) {</p><pre><code>super(reactContext);</code></pre><p>}<br>@Override<br>public String getName() {</p><pre><code>return &quot;ToastExample&quot;;</code></pre><p>}<br>@Nullable<br>@Override<br>public Map&lt;String, Object&gt; getConstants() {</p><pre><code>final Map&amp;lt;String, Object&amp;gt; constants = new HashMap&amp;lt;&amp;gt;();constants.put(DURATION_SHORT_KEY, Toast.LENGTH_SHORT);constants.put(DURATION_LONG_KEY, Toast.LENGTH_LONG);return constants;</code></pre><p>}<br>@ReactMethod<br>public void show(String message, int duration) {</p><pre><code>Toast.makeText(getReactApplicationContext(), message, duration).show();</code></pre><p>}<br>}<br>`</p><h5 id="有几点需要说明："><a href="#有几点需要说明：" class="headerlink" title="有几点需要说明："></a>有几点需要说明：</h5><pre><code>1.  getName返回的NativeModule名字，在后面JaveScript代码中是用来表示此类的，在js中我们可以通过NativeModule.ToastExample来访问此类</code></pre><ol start="2"><li>为了能够在js中调用Android的本地方法，需要被调用的方法必须加上<code>@ReactMethod</code>注释，作为js和java中的桥梁方法，该方法返回类型需要是void，访问权限为public</li><li>getConstants函数可实现，可不实现，主要是返回一些暴露给js的常量值，用于一些预定义的常量值，在js到java过程中的同步和一致。</li></ol><h2 id="注册模块"><a href="#注册模块" class="headerlink" title="注册模块"></a>注册模块</h2><p>接着就是在自定义的Package中注册上一步创建的NativeModule，如果不注册，上一步创建的NativeModule对于js是不可用的，也就是说如果想要在js中使用自己创建的NativeModule，必须要注册，注册是在createNativeModules方法中完成的，代码如下：</p><pre>`public class ToastReactPackage implements ReactPackage {    @Override    public List&lt;NativeModule&gt; createNativeModules(ReactApplicationContext reactContext) {        List&lt;NativeModule&gt; modules = new ArrayList&lt;&gt;();        modules.add(new ToastModule(reactContext));        return modules;    }    @Override    public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) {        return Collections.emptyList();    }}`</pre><p>注册之后你需要在MainApplication(init创建项目的时候自动会生成此类)类中的getPackage方法中添加自定义的Package类的实例，代码如下：</p><p><pre>`@Override<br>protected List&lt;ReactPackage&gt; getPackages() {</pre></p><pre><code>return Arrays.&amp;lt;ReactPackage&amp;gt;asList(        new MainReactPackage(),        new ToastReactPackage());</code></pre><p>}<br>`</p><p>到此，在Java层(Android本地)的工作算是完成了，接着就是如何在js中调用了</p><a id="more"></a><h2 id="JS中调用"><a href="#JS中调用" class="headerlink" title="JS中调用"></a>JS中调用</h2><p>为了方便其他模块以后共用，或者说是为了项目结构清晰，我们把创建的NativeModule模块单独包装到一个js文件中，作为一个简单的库供其他文件引用，命名为ToastAndroid.js，代码如下：</p><pre>`'use strict';import { NativeModules } from 'react-native';module.exports = NativeModules.ToastExample;`</pre><p>那么我们就可以在另一个js文件中引入上面的文件，来调用上面的文件中所定义的展示toast的方法了，命名为TestToast.js，部分代码如下：</p><pre>`import React, { Component } from 'react';import {    StyleSheet,    View,    Button,    PixelRatio} from 'react-native';import ToastExample from './ToastAndroid'export default class ToastTest extends Component {    render() {        return (            &lt;View style={styles.container}&gt;                &lt;Button style={styles.big_button}                    title="点击调用Android原生Toast"                    onPress={this.onButtonClick}                    accessibilityLabel="展示一个Toast信息" /&gt;            &lt;/View&gt;        );    }    onButtonClick(event) {        ToastExample.show('Hello,原生Toast!', ToastExample.SHORT);    }}`</pre><p>上面就是一个简单的React native布局，一个按钮，点击的时候调用ToastExample模块中定义的show方法</p><p>最后为了能够展示该界面，我们在index.android.js中引用上述js文件并注册到项目，部分代码如下:</p><p><pre>`import React from ‘react’;<br>import {<br>  AppRegistry,<br>} from ‘react-native’;<br>import ToastTest from ‘./TestToast’</pre></p><p>AppRegistry.registerComponent(‘CallNativeToast’, () =&gt; ToastTest);</p></li></ul><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>是时候放一张运行成功的图了</p><p><img src="http://www.picksomething.cn/wp-content/uploads/2017/09/qq_pic_merged_1505732794971.jpg" alt="运行截图"></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>React native调用Android本地方法(API)到这就算是成功了，github完整代码：<a href="https://github.com/picksomething/CallNativeToast" target="_blank" rel="noopener">请戳这里</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;学习了一周React native之后，感觉还挺有意思的，今天来说说通过React native调用Android平台的一些本地方法(API)，以我目前的水平，感觉这个功能可能平时用的不会太多，但我感觉通过React native开发Android应用的过程中肯定会有用到的时候，本文以调用Android平台的Toast为例来讲讲如何通过React native调用Android&lt;br&gt;原生的一些方法(API)。&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;p&gt;下面开始项目从创建到运行成功的全过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;创建项目&lt;/p&gt;
&lt;p&gt;&lt;code&gt;react-native init CallNativeToast&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;创建一个NativeModule&lt;/p&gt;
&lt;p&gt;本地模块一般是继承ReactContextBaseJavaModule的Java类，然后实现React native(js)调用Android本地API所需的功能，我们这次目标是通过js调用Android来展示一个Toast，代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class ToastModule extends ReactContextBaseJavaModule {
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;private static final String DURATION_SHORT_KEY = “SHORT”;&lt;br&gt;private static final String DURATION_LONG_KEY = “LONG”;&lt;br&gt;public ToastModule(ReactApplicationContext reactContext) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;super(reactContext);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;br&gt;@Override&lt;br&gt;public String getName() {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return &amp;quot;ToastExample&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;br&gt;@Nullable&lt;br&gt;@Override&lt;br&gt;public Map&amp;lt;String, Object&amp;gt; getConstants() {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;final Map&amp;amp;lt;String, Object&amp;amp;gt; constants = new HashMap&amp;amp;lt;&amp;amp;gt;();
constants.put(DURATION_SHORT_KEY, Toast.LENGTH_SHORT);
constants.put(DURATION_LONG_KEY, Toast.LENGTH_LONG);
return constants;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;br&gt;@ReactMethod&lt;br&gt;public void show(String message, int duration) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Toast.makeText(getReactApplicationContext(), message, duration).show();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;br&gt;}&lt;br&gt;`&lt;/p&gt;
&lt;h5 id=&quot;有几点需要说明：&quot;&gt;&lt;a href=&quot;#有几点需要说明：&quot; class=&quot;headerlink&quot; title=&quot;有几点需要说明：&quot;&gt;&lt;/a&gt;有几点需要说明：&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;1.  getName返回的NativeModule名字，在后面JaveScript代码中是用来表示此类的，在js中我们可以通过NativeModule.ToastExample来访问此类
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;为了能够在js中调用Android的本地方法，需要被调用的方法必须加上&lt;code&gt;@ReactMethod&lt;/code&gt;注释，作为js和java中的桥梁方法，该方法返回类型需要是void，访问权限为public&lt;/li&gt;
&lt;li&gt;getConstants函数可实现，可不实现，主要是返回一些暴露给js的常量值，用于一些预定义的常量值，在js到java过程中的同步和一致。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;注册模块&quot;&gt;&lt;a href=&quot;#注册模块&quot; class=&quot;headerlink&quot; title=&quot;注册模块&quot;&gt;&lt;/a&gt;注册模块&lt;/h2&gt;&lt;p&gt;接着就是在自定义的Package中注册上一步创建的NativeModule，如果不注册，上一步创建的NativeModule对于js是不可用的，也就是说如果想要在js中使用自己创建的NativeModule，必须要注册，注册是在createNativeModules方法中完成的，代码如下：&lt;/p&gt;
&lt;pre&gt;`public class ToastReactPackage implements ReactPackage {

    @Override
    public List&amp;lt;NativeModule&amp;gt; createNativeModules(ReactApplicationContext reactContext) {

        List&amp;lt;NativeModule&amp;gt; modules = new ArrayList&amp;lt;&amp;gt;();
        modules.add(new ToastModule(reactContext));

        return modules;
    }

    @Override
    public List&amp;lt;ViewManager&amp;gt; createViewManagers(ReactApplicationContext reactContext) {
        return Collections.emptyList();
    }
}
`&lt;/pre&gt;

&lt;p&gt;注册之后你需要在MainApplication(init创建项目的时候自动会生成此类)类中的getPackage方法中添加自定义的Package类的实例，代码如下：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;`@Override&lt;br&gt;protected List&amp;lt;ReactPackage&amp;gt; getPackages() {&lt;/pre&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return Arrays.&amp;amp;lt;ReactPackage&amp;amp;gt;asList(
        new MainReactPackage(),
        new ToastReactPackage()
);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;br&gt;`&lt;/p&gt;
&lt;p&gt;到此，在Java层(Android本地)的工作算是完成了，接着就是如何在js中调用了&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://picksomething.cn/categories/Android/"/>
    
      <category term="React native" scheme="http://picksomething.cn/categories/Android/React-native/"/>
    
    
      <category term="Android" scheme="http://picksomething.cn/tags/Android/"/>
    
      <category term="React native" scheme="http://picksomething.cn/tags/React-native/"/>
    
      <category term="JavaScript" scheme="http://picksomething.cn/tags/JavaScript/"/>
    
      <category term="NativeModule" scheme="http://picksomething.cn/tags/NativeModule/"/>
    
  </entry>
  
  <entry>
    <title>React native基础之语法总结</title>
    <link href="http://picksomething.cn/2017/09/17/React%20native%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://picksomething.cn/2017/09/17/React native基础之语法总结/</id>
    <published>2017-09-16T16:01:20.000Z</published>
    <updated>2018-04-24T07:46:37.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="絮叨"><a href="#絮叨" class="headerlink" title="絮叨"></a>絮叨</h1><p>最近因为工作需要，开始学习React native，虽然以前学习过js，但都是上大学时候的事了，几年没关注这块了，现在又衍生出很多以js为基础的框架或者编程语言，习惯了Java，现在开始学习React native，最大的两点感觉：</p><ol><li>React native语法感觉好随意哈</li><li>代码看起来好乱啊</li></ol><p>不过既然要开始学习了React native了，就要搞清楚里面的方方面面。通过查看官方文档，Google搜索，大概整理了一些React native中容易忽略的基础东西(本文基于最新的ES6语法)</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量感觉React native和Java或者Python还是有挺多不一样的地方的，作为弱类型语言，React native里面竟然有三个定义变量的关键字：var,let和const<br><a id="more"></a></p><ul><li><p>var</p><p>这个学过js的应该都清除，没记错的话js最早一直都是用这个来定义变量</p><p></p></li><li><p>let</p><p>之前学习swift的时候，好像swift语法里面也有let这个定义变量的关键字，在React native中，let和var的主要区别是作用域不同，var的作用域是函数内，也就是在一个函数内的任何地方都可以访问或者修改var定义的变量，而使用let定义的变量，只在定义该变量的代码区块内可用</p></li><li><p>const</p><p>这个和let的作用域相同，都在定义改变量的代码块内可用，它和let不同的是，const定义的变量是不可以改变的，类似java中带final的关键字变量，声明的时候需要赋值</p></li></ul><h1 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h1><ul><li><p></p><p>=&gt;(Arrow functions)</p><p>在看React native文档的时候，经常可以看到=&gt;这个符号，比如下面这段代码：</p><pre><code>function getMoviesFromApiAsync() {</code></pre><p>  return fetch(‘<a href="https://facebook.github.io/react-native/movies.json&#39;" target="_blank" rel="noopener">https://facebook.github.io/react-native/movies.json&#39;</a>)</p><pre><code>.then((response) =&amp;gt; response.json()).then((responseJson) =&amp;gt; {  return responseJson.movies;</code></pre><p>  })<br>  .catch((error) =&gt; {</p><pre><code>console.error(error);</code></pre><p>  });<br>}<br><code>&lt;/pre&gt;在函数getMoviesFromApiAsync函数里面，两次看到=&gt;这个符号，这个符号官方定义是叫做箭头函数(Arrow functions)，它语法简洁，和java 8中的lambda蛮像的，基本语法如下：&lt;pre&gt;</code>(param1, param2, …, paramN) =&gt; { statements }<br>(param1, param2, …, paramN) =&gt; expression<br>// equivalent to: (param1, param2, …, paramN) =&gt; { return expression; }<br>// Parentheses are optional when there’s only one parameter name:<br>(singleParam) =&gt; { statements }<br>singleParam =&gt; { statements }<br>// A function with no parameters should be written with a pair of parentheses.<br>() =&gt; { statements }<br>`<br>看完基本语法你就会明白上面的例子中(response) =&gt; response.json和(responseJson) =&gt; {return responseJson.movies;}的含义了：=&gt;前面小括号里面的相当于参数，=&gt;后面相当于函数返回值或者函数表达式<br>有几点需要注意的就是：</p><pre><code>*   如果没有参数需要传入，直接写()，切记不可省略</code></pre><ul><li>如果只有一个参数，()是可写可不写的</li><li>两个以上的参数，()是必须要写的</li></ul><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>在java中假设你定义了一个String类型的变量name=”World”，然后需要输出Hello,World!的时候，一般都是printf(“Hello,” + name + “!”)，现在在React native里面这种拼接也是允许的，但还有一种拼接方式如下：</p><p><pre>`”Hello, ${name}!”</pre></p></li></ul><p>这个和Android中字符串format是有点类似的</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次就遇到了大概这些不明白的，然后学习总结了一下，后面遇到新的不明白的再继续总结，其实习惯了，感觉写React native也挺好的！<br>一个Hello World的React native项目：<a href="https://github.com/picksomething/ReactAndroidApp" target="_blank" rel="noopener">点击这里!</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;絮叨&quot;&gt;&lt;a href=&quot;#絮叨&quot; class=&quot;headerlink&quot; title=&quot;絮叨&quot;&gt;&lt;/a&gt;絮叨&lt;/h1&gt;&lt;p&gt;最近因为工作需要，开始学习React native，虽然以前学习过js，但都是上大学时候的事了，几年没关注这块了，现在又衍生出很多以js为基础的框架或者编程语言，习惯了Java，现在开始学习React native，最大的两点感觉：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;React native语法感觉好随意哈&lt;/li&gt;
&lt;li&gt;代码看起来好乱啊&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不过既然要开始学习了React native了，就要搞清楚里面的方方面面。通过查看官方文档，Google搜索，大概整理了一些React native中容易忽略的基础东西(本文基于最新的ES6语法)&lt;/p&gt;
&lt;h1 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h1&gt;&lt;p&gt;变量感觉React native和Java或者Python还是有挺多不一样的地方的，作为弱类型语言，React native里面竟然有三个定义变量的关键字：var,let和const&lt;br&gt;
    
    </summary>
    
      <category term="React native" scheme="http://picksomething.cn/categories/React-native/"/>
    
    
      <category term="js" scheme="http://picksomething.cn/tags/js/"/>
    
      <category term="React native" scheme="http://picksomething.cn/tags/React-native/"/>
    
      <category term="const" scheme="http://picksomething.cn/tags/const/"/>
    
      <category term="function" scheme="http://picksomething.cn/tags/function/"/>
    
      <category term="let" scheme="http://picksomething.cn/tags/let/"/>
    
      <category term="语法" scheme="http://picksomething.cn/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Android上传Library到JCenter可能遇到的问题</title>
    <link href="http://picksomething.cn/2017/03/29/Android%E4%B8%8A%E4%BC%A0Library%E5%88%B0JCenter%E5%8F%AF%E8%83%BD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://picksomething.cn/2017/03/29/Android上传Library到JCenter可能遇到的问题/</id>
    <published>2017-03-29T10:25:30.000Z</published>
    <updated>2018-04-24T07:46:37.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这并不是一篇教你如何step by step上传Android Library到JCenter，因为你随便搜一下，都会发现很多那样的文章，而且几乎都大同小异(互相抄)。正式因为抄来抄去，可能很多人并不会深究这个教程有什么问题，自己按照这个教程能够达到目的吗，可能会遇到了什么问题？本文的主要目的就是结合自己完成的过程告诉你按照网上的大部分教程你可能会遇到什么问题，当你因为参考网上大多数教程而又一直失败正在抓狂的时候，看看本文也许有帮助。</p><h4 id="问题一：在bintray-com上注册自己的账号"><a href="#问题一：在bintray-com上注册自己的账号" class="headerlink" title="问题一：在bintray.com上注册自己的账号"></a>问题一：在<code>bintray.com</code>上注册自己的账号</h4><p>大部分教程都是告诉你打开<code>https://bintray.com/</code>然后注册一个账号，然而随着bintray的更新，你现在打开该网站看到的是这样的(截止2017年03月29)：<br><a id="more"></a><br><a href="http://www.picksomething.cn/wp-content/uploads/2017/03/bintray.png" target="_blank" rel="noopener"><img src="http://www.picksomething.cn/wp-content/uploads/2017/03/bintray-744x465.png" alt=""></a><br>你可能有点懵，为什么注册账号看起来还要钱，当你点击<strong>START YOUR FREE TRIAL</strong>去注册的时候，你其实已经进入了团队账号注册，类似于企业账号，所以你会发现会让你填写Company Name和Organization ID，除此之外和注册个人账号都一样了，如果你是这样注册的， 等你按照网上大多数的教程step by step往下走的时候，你会发现到最后执行上传命令的时候，一直出现这样的错误：</p><pre><code>HTTP/1.1 401 Unauthorized [message:This resource requires authentication]`&lt;/pre&gt;按照网上的教程你以为是用户名或者apikey填错了，但是你会发现你怎么改都没用。正确的个人账号注册方法是点击**START YOUR FREE TRIAL**下方的**For Open Source Distribution Sign Up Here**来Sign Up，细心的你可能会发现，二者的注册地址是不一样的，企业的注册地址是`https://bintray.com/signup`，个人账号的注册地址是`https://bintray.com/signup/oss`。这个坑浪费了我很多时间，当然也不是说如果按照企业账号注册最后就不能完成上传，一样可以，但是网上的教程几乎都是针对个人账号而言，如果你注册的是企业账号按照网上的教程是一定不能成功的，因为企业账号需要配置组织名称。#### 问题二：artifactId要和Library module的名字一样当你到最后上传Library到JCenter的时候，你可能会遇到这样的错误：&lt;pre&gt;`HTTP/1.1 400 Bad Request [message:Unable to upload files: Maven group, artifact or version defined in the pom file do not match the file path...]</code></pre><p>网上大多数可能会说是要artifactId要和libraryName保持一致，其实是artifactId要和你要上传的Library module的名字保持一致</p><p>这是我按照网上的大多数教程上传的时候遇到的两个比较坑的问题，其他如果还有什么问题，那应该就是个例了，google一下，应该都好解决。</p><p>当然，针对网上大多数的教程，我还有一些建议：</p><ul><li>配置bintrayRepo的时候，并没有所谓的默认就是maven这一说，不要以为新建仓库的时候仓库类型选择是maven，默认名字就应该是maven，这个可以随便写，而且建议新建康库的时候最好不要叫maven，要么结合自己的用户名新建，要么结合功能用处新建，比如Android-xx等。</li><li>配置bintrayName的时候，网上的教程基本上也是所谓的要和你在仓库里面新建的package保持一致，保持一致这句话没毛病，然而其实你没必要在仓库里面先新建一个package，只要你有仓库，其他信息都配置正确，上传的时候会自动按照你配置的<code>bintrayName</code>在你的仓库里面创建的。</li></ul><h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p>自己在github上放了上传到JCenter过程中简化gradle文件配置的模板文件，README里面也写清楚了如何使用，有需要的可以去参考一下：<a href="https://github.com/picksomething/jcenter-configuration" target="_blank" rel="noopener">github配置文件</a></p><p>同时自己也放上自己第一次上传的一个Library，需要的可以去查看：<a href="https://github.com/picksomething/sliding-tab-indicator" target="_blank" rel="noopener">slidingtabindicator</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这并不是一篇教你如何step by step上传Android Library到JCenter，因为你随便搜一下，都会发现很多那样的文章，而且几乎都大同小异(互相抄)。正式因为抄来抄去，可能很多人并不会深究这个教程有什么问题，自己按照这个教程能够达到目的吗，可能会遇到了什么问题？本文的主要目的就是结合自己完成的过程告诉你按照网上的大部分教程你可能会遇到什么问题，当你因为参考网上大多数教程而又一直失败正在抓狂的时候，看看本文也许有帮助。&lt;/p&gt;
&lt;h4 id=&quot;问题一：在bintray-com上注册自己的账号&quot;&gt;&lt;a href=&quot;#问题一：在bintray-com上注册自己的账号&quot; class=&quot;headerlink&quot; title=&quot;问题一：在bintray.com上注册自己的账号&quot;&gt;&lt;/a&gt;问题一：在&lt;code&gt;bintray.com&lt;/code&gt;上注册自己的账号&lt;/h4&gt;&lt;p&gt;大部分教程都是告诉你打开&lt;code&gt;https://bintray.com/&lt;/code&gt;然后注册一个账号，然而随着bintray的更新，你现在打开该网站看到的是这样的(截止2017年03月29)：&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://picksomething.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://picksomething.cn/tags/Android/"/>
    
      <category term="Gradle" scheme="http://picksomething.cn/tags/Gradle/"/>
    
      <category term="JCenter" scheme="http://picksomething.cn/tags/JCenter/"/>
    
      <category term="Library" scheme="http://picksomething.cn/tags/Library/"/>
    
  </entry>
  
  <entry>
    <title>Android isConnected在网络连接正常的情况下依然返回false？</title>
    <link href="http://picksomething.cn/2017/02/21/Android%20isConnected%E5%9C%A8%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E6%AD%A3%E5%B8%B8%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%BE%9D%E7%84%B6%E8%BF%94%E5%9B%9Efalse%EF%BC%9F/"/>
    <id>http://picksomething.cn/2017/02/21/Android isConnected在网络连接正常的情况下依然返回false？/</id>
    <published>2017-02-21T07:11:14.000Z</published>
    <updated>2018-04-24T07:54:59.329Z</updated>
    
    <content type="html"><![CDATA[<h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><p>最近在测试一个功能的时候，偶然发现，网络连接都正常且能上网的情况下，居然提示网络不通，最开始以为只是偶然情况，就没太在意，后来发现能够重现，然后就决定研究一下，还真研究出一些问题</p><hr><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>然后就看了一下程序判断网络是否连接的这一块代码，代码如下，很简单也很常规：</p><pre><code>/**  * 判断网络是否连接  *  * @param context  * @return  */public static boolean isNetworkConnected(Context context) {    try {        ConnectivityManager connectivityManager = (ConnectivityManager)                context.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();        return activeNetworkInfo != null &amp;&amp; activeNetworkInfo.isConnected;    } catch (Exception e) {        return false;    }}</code></pre><p>这就是普通的判断网络是否连接(注意，只是判断是否连接，至于能不能上网并不能判断)的，用的也都是Android自身的API来判断的，按说没有什么问题啊，但是就是这个方法一直返回false。。。</p><a id="more"></a><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>我首先想到可能的原因是权限问题，因为我用的是Android 6.0的测试机，Android 6.0之后很多权限不是需要程序主动去申请，用户同意之后才会获得，我就想着是不是因为没有获取到访问网络信息的权限，所以在获取网络连接情况的代码短的地方抛出异常了，导致返回的一直是false，带着疑问，我就调试了一下，发现程序并不会抛出异常，都是正常执行，networkInfo也不为null，<strong>networkInfo.isConnected返回的就是false</strong>，这下就有意思了，我看了一下NetworkInfo类的实例方法isConnected()，也没有被deprecated，也没有说可能会不准确之类的啊，就觉得更郁闷了。。。</p><p>然后我想看看其他手机是不是也是这样的，我试了一台Android4.3的vivo手机和一台同样系统版本的三星手机，都是正常的，然后又测试了一台Android 6.0的nexus手机，也是ok的，就唯独6.0的小米系统返回的是false。。。</p><p>为了更进一步确认是只有连接wifi的情况下会这样，还是说移动网络也会这样，我就把我的6.0的小米测试机的wifi关掉，用我的联通4G来测试，结果还是一样，isConnected依然返回false。</p><blockquote><p>因为这个判断网络是否连接的方法，在应用打开的时候也会调用，我发现在应用打开的时候调用返回的就是true，都是正常的，唯独退出应用之后，后台定时任务每次调用的时候返回的就是false了</p></blockquote><p>网上有说调用<code>isConnectedOrConnecting</code>，结果是一样的。</p><p>简单总结一下就是，在6.0的小米手机上，正常在应用内调用isConnected()返回值都是正常的，等退出应用之后，通过定时任务调用就会在连接的情况下也返回false，其他测试手机则不会。</p><blockquote><p>于是我猜测：可能是miui为了流畅度或者是低耗电量等方面的优化，故意这样设计的，就是为了防止一些应用在后台定时判断网络连接的情况下，做一些网络请求任务，造成高耗电又影响流畅性，所以小米系统基本在所有应用都退出，回到桌面的情况下，有可能会短暂的禁掉当前的网络链接，当然这也只是猜测而已。</p></blockquote><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>如果在小米6.0的机器上，大家非要在后台判断网络连接情况，那么目前来看，最保险的做法就是在程序中请求一下常用的网站，比如baidu，或者ping一下，来判断网络的真正链接情况，实现很简单，网上有很多，我在这里就不写了，当然我亲测这种方法是有效的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h4&gt;&lt;p&gt;最近在测试一个功能的时候，偶然发现，网络连接都正常且能上网的情况下，居然提示网络不通，最开始以为只是偶然情况，就没太在意，后来发现能够重现，然后就决定研究一下，还真研究出一些问题&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;然后就看了一下程序判断网络是否连接的这一块代码，代码如下，很简单也很常规：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
  * 判断网络是否连接
  *
  * @param context
  * @return
  */
public static boolean isNetworkConnected(Context context) {
    try {
        ConnectivityManager connectivityManager = (ConnectivityManager)
                context.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
        return activeNetworkInfo != null &amp;amp;&amp;amp; activeNetworkInfo.isConnected;
    } catch (Exception e) {
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这就是普通的判断网络是否连接(注意，只是判断是否连接，至于能不能上网并不能判断)的，用的也都是Android自身的API来判断的，按说没有什么问题啊，但是就是这个方法一直返回false。。。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://picksomething.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://picksomething.cn/tags/Android/"/>
    
      <category term="isConnected" scheme="http://picksomething.cn/tags/isConnected/"/>
    
      <category term="NetworkInfo" scheme="http://picksomething.cn/tags/NetworkInfo/"/>
    
      <category term="网络连接" scheme="http://picksomething.cn/tags/%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>Android自定义进度条时padding无效果?</title>
    <link href="http://picksomething.cn/2016/10/26/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%9B%E5%BA%A6%E6%9D%A1%E6%97%B6padding%E6%97%A0%E6%95%88%E6%9E%9C/"/>
    <id>http://picksomething.cn/2016/10/26/Android自定义进度条时padding无效果/</id>
    <published>2016-10-26T15:50:00.000Z</published>
    <updated>2018-04-24T08:00:25.101Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>标题很简单，自定义带padding的水平进度条，也就是如下效果的进度条</p><p><a href="http://www.picksomething.cn/wp-content/uploads/2016/10/progressbar.png" target="_blank" rel="noopener"><img src="http://www.picksomething.cn/wp-content/uploads/2016/10/progressbar-744x82.png" alt="progressbar"></a></p><p>其实很简单，但是因为有一个坑还是要提出来，话不多说了，首先看看正常的实现：</p><hr><h4 id="常规方案"><a href="#常规方案" class="headerlink" title="常规方案"></a>常规方案</h4><p>首先是布局文件中放一个ProgressBar控件：</p><pre><code>ProgressBar    android:id=&quot;@+id/custom_horizontal_progress&quot;    style=&quot;?android:attr/progressBarStyleHorizontal&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;16dp&quot;    android:progressDrawable=&quot;@drawable/progress_bg_drawable&quot;</code></pre><p>补充：为了更直观，我直接将16dp写到了布局文件中，规范写法这些值要放到dimen资源文件中引用</p><a id="more"></a><p>然后drawable目录下的progress_bg_drawable.xml文件是这样的：</p><p><a href="http://www.picksomething.cn/wp-content/uploads/2016/10/progress_bg_drawable.png" target="_blank" rel="noopener"><img src="http://www.picksomething.cn/wp-content/uploads/2016/10/progress_bg_drawable-744x535.png" alt="progress_bg_drawable"></a></p><p>绿色的进度条资源文件green_progress_drawable.xml是这样的：</p><p><a href="http://www.picksomething.cn/wp-content/uploads/2016/10/green_progress_drawable.png" target="_blank" rel="noopener"><img src="http://www.picksomething.cn/wp-content/uploads/2016/10/green_progress_drawable-744x330.png" alt="green_progress_drawable"></a></p><p>这个资源文件主要是对上面的绿色进度设置一些渐变色和圆角属性，如果没有渐变色，直接设置填充色<code>solid</code>属性即可：</p><p>好了，到此自定义带padding的水平进度条基本工作就完成了，很简单，然后运行一看，效果也都和设计要求一样，似乎很顺利，也很完美</p><hr><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><blockquote><p>但是，你会发现在Android5.1以下的版本上，这样设置并不会有padding效果</p></blockquote><p>为什么会这样，我还没搞明白，因为毕竟这不像是某个接口可以去看源码，看不同Android版本源码发生的改变，也没有Google出什么结果，如果有知道的还希望告知一下</p><p>那么如何解决Android 5.1以下的没有padding效果呢，继续往下看</p><hr><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>解决办法就是修改上面的进度资源文件green_progress_drawable.xml，修改之后是这样的：</p><p><a href="http://www.picksomething.cn/wp-content/uploads/2016/10/new_green_progress_drawable.png" target="_blank" rel="noopener"><img src="http://www.picksomething.cn/wp-content/uploads/2016/10/new_green_progress_drawable-744x552.png" alt="new_green_progress_drawable"></a></p><p>修改的目的也就是在这里面设置padding，当然里面那个透明背景的第一个item是可要可不要的，重新在Android5.1以下的版本上运行，你会发现都带padding效果了，和设计的要求一样了</p><h4 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h4><blockquote><p>还没结束，如果你这样在Android 5.1以上的版本执行的时候你会发现原本你想要padding=2dp的效果， 确变成了padding=4的效果，原因是之前在progress_bg_drawable.xml文件中设置的padding在只在 Android5.1以上有效果，而在green_progress_drawable.xml里面设置的padding在各个Android版本上都有效果，所以记住把progress_bg_drawable.xml中设置的padding属性删除掉，防止在Android5.1以上的版本上重复设置</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;标题很简单，自定义带padding的水平进度条，也就是如下效果的进度条&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.picksomething.cn/wp-content/uploads/2016/10/progressbar.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;http://www.picksomething.cn/wp-content/uploads/2016/10/progressbar-744x82.png&quot; alt=&quot;progressbar&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其实很简单，但是因为有一个坑还是要提出来，话不多说了，首先看看正常的实现：&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;常规方案&quot;&gt;&lt;a href=&quot;#常规方案&quot; class=&quot;headerlink&quot; title=&quot;常规方案&quot;&gt;&lt;/a&gt;常规方案&lt;/h4&gt;&lt;p&gt;首先是布局文件中放一个ProgressBar控件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ProgressBar
    android:id=&amp;quot;@+id/custom_horizontal_progress&amp;quot;
    style=&amp;quot;?android:attr/progressBarStyleHorizontal&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;16dp&amp;quot;
    android:progressDrawable=&amp;quot;@drawable/progress_bg_drawable&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;补充：为了更直观，我直接将16dp写到了布局文件中，规范写法这些值要放到dimen资源文件中引用&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://picksomething.cn/categories/Android/"/>
    
    
      <category term="padding" scheme="http://picksomething.cn/tags/padding/"/>
    
      <category term="progress" scheme="http://picksomething.cn/tags/progress/"/>
    
  </entry>
  
  <entry>
    <title>工作中常用的一些shell命令</title>
    <link href="http://picksomething.cn/2016/10/21/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9Bshell%E5%91%BD%E4%BB%A4/"/>
    <id>http://picksomething.cn/2016/10/21/工作中常用的一些shell命令/</id>
    <published>2016-10-21T04:31:13.000Z</published>
    <updated>2018-04-24T07:46:37.427Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>开发人员掌握一些常用的命令，对于提高效率(B格)是很有帮助的，本篇文章记录下平时工作中常用的shell命令，同时也是为了测试一下新安装的markdown editor插件</p><h5 id="查看签名文件信息"><a href="#查看签名文件信息" class="headerlink" title="查看签名文件信息"></a>查看签名文件信息</h5><p>主要用在不用先签名到apk上，可以直接查看签名文件的md5等一些信息</p><pre><code>keytool -list -v -keystore debug.keystore`&lt;/pre&gt;* * *##### 压缩命令主要用在传输文件的时候可以先压缩一下* * *&lt;!--more--&gt;##### grep命令主要用于在项目中或者在某个目录下查找某个字符串`-r 递归 -i 忽略大小写 -n显示行号(从1开始)``-l --files-with-mathches -L --file-without-mathch`* * *##### 查看app crash log信息主要用于当手机app发生crash的时候，能够在命令行里面查看crash信息，对调试很有帮助`-A num, --after-context=num 搜索内容后面显示多少行``-B num, --before-content=num 搜索内容前面显示多少行`&lt;pre&gt;`adb logcat | grep -i &quot;FATAL&quot; -A 25`&lt;/pre&gt;* * *##### 查看activity任务栈信息主要用于查看当前正在运行的任务栈信息，有助于分析activity的各种启动模式&lt;pre&gt;`adb shell dumpsys activity activities | grep -i run</code></pre><hr><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>上面都是日常开发中经常用到的命令，熟练掌握这些命令是很有帮助的，如果想查看每个命令的更多用法可以使用<code>man xxx</code>去看</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;开发人员掌握一些常用的命令，对于提高效率(B格)是很有帮助的，本篇文章记录下平时工作中常用的shell命令，同时也是为了测试一下新安装的ma
      
    
    </summary>
    
      <category term="Shell" scheme="http://picksomething.cn/categories/Shell/"/>
    
    
  </entry>
  
  <entry>
    <title>Android UI测试框架Espresso</title>
    <link href="http://picksomething.cn/2016/04/17/Android%20UI%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6Espresso/"/>
    <id>http://picksomething.cn/2016/04/17/Android UI测试框架Espresso/</id>
    <published>2016-04-17T13:01:21.000Z</published>
    <updated>2018-04-24T07:46:37.427Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近这两周工作相对不那么忙了，所以就抽空结合官方文档研究了一下Android UI测试框架Espresso，从框架的setup到测试用例编写到执行测试用例</p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Espresso是Google官方推出的开源UI测试框架，它的特点就是简洁，很容易上手编写测试用例，而且关于UI测试Espresso支持的也越来越完善了<br>官方项目地址：<a href="https://google.github.io/android-testing-support-library/docs/espresso/index.html" target="_blank" rel="noopener">点击查看Espresso测试框架详细信息</a></p><hr><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在dependencies里面添加引用</p><pre><code>// App dependenciescompile &apos;com.android.support:support-annotations:23.0.1&apos;// Testing-only dependencies// Force usage of support annotations in the test app, since it is internally used by the runner module.androidTestCompile &apos;com.android.support:support-annotations:23.0.1&apos;androidTestCompile &apos;com.android.support.test:runner:0.4.1&apos;androidTestCompile &apos;com.android.support.test:rules:0.4.1&apos;androidTestCompile &apos;com.android.support.test.espresso:espresso-core:2.2.1&apos;`&lt;/pre&gt;在`android.defaultConfig`设置`instrumentation runner`&lt;!--more--&gt;&lt;pre&gt;`testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;`&lt;/pre&gt;这里有一点需要注意的是官方文档中添加依赖的样例是这样的&lt;pre&gt;`dependencies {    // App&apos;s dependencies, including test    compile &apos;com.android.support:support-annotations:22.2.0&apos;    // Testing-only dependencies    androidTestCompile &apos;com.android.support.test:runner:0.5&apos;    androidTestCompile &apos;com.android.support.test.espresso:espresso-core:2.2.2&apos;}`&lt;/pre&gt;如果按照官方的这个来，build的时候你会遇到这样一个错误：&gt; Error:Conflict with dependency &apos;com.android.support:support-annotations&apos;###### 详情如下图所示：[![QQ20160417-0@2x](http://www.picksomething.cn/wp-content/uploads/2016/04/QQ20160417-0@2x-420x123.png)](http://www.picksomething.cn/wp-content/uploads/2016/04/QQ20160417-0@2x.png)##### 产生这种错误的原因如下：&gt; 通常是因为你的主程序和测试程序使用了相同的库，但是使用的版本却不一样，你可能会觉得奇怪，看代码里面测试依赖并没有引用`support-annotations`库啊，为什么会说测试程序和主程序使用了相同的库，这是因为在测试库`runner`中内部使用了`support-annotations`库，而且我们知道在运行的时候主程序apk和测试apk是共享同一个进程和相同的class path，这就代表主程序和测试程序必须使用相同版本的任何依赖库，一旦版本不同，所以才会出现上面的冲突错误###### 形象说明见下图：[![QQ20160417-1@2x](http://www.picksomething.cn/wp-content/uploads/2016/04/QQ20160417-1@2x-420x163.png)](http://www.picksomething.cn/wp-content/uploads/2016/04/QQ20160417-1@2x.png)###### 解决办法:既然知道了问题产生的原因，那么解决办法也很简单，两种方式：1.更改主程序里面对应冲突库的版本使其于测试程序里面的版本一致 2.更改测试程序里面冲突库的版本使其于主程序中的版本一致通常比较简单的做法就是在build.gradle文件中显式加入另一个test dependencies和主程序代码中的冲突库版本一致的库，这样就强制要求测试程序也使用和主程序相同版本的库文件，像这样：&lt;pre&gt;`dependencies {    // App&apos;s dependencies, including test    compile &apos;...:support-annotations:23.3.0&apos;    // Testing-only dependencies    Force the same version of support-annotations    compile &apos;...:support-annotations:23.3.0&apos;}`&lt;/pre&gt;* * *#### 编写测试用例这个很简单，只要结合官方文档给出的例子，看看文档说明和对应的API，很容易上手，下面是我写的一个打开NavigationView的测试用例：&lt;pre&gt;`@Testpublic void openNavigationView() {    onView(withId(R.id.drawer_layout)).perform(        actionOpenNavigationView());}private ViewAction actionOpenDrawer() {    return new ViewAction() {        @Override        public Matcher&lt;View&gt; getConstraints() {            return isAssignableFrom(DrawerLayout.class);        }        @Override        public String getDescription() {            return &quot;open drawer&quot;;        }        @Override        public void perform(UiController uiController, View view) {            ((DrawerLayout) view).openDrawer(GravityCompat.START);        }    };}`&lt;/pre&gt;</code></pre><ul><li><strong>Espresso</strong> – 和视图views的交互切入点(通过onView和onData),而且也会暴露不需要依赖任何view的API(eg.pressBack).<p></p></li><li><strong>ViewMatchers</strong> – 这个是我们如何find views的方式. ViewMatchers包含一个允许你在视图层次结构中找到指定的view的matchers的集合.以上，我们使用withId(R.id.etInput)来指明我们正在寻找的一个EditText，通过id = R.id.etInput.</li><li><strong>ViewActions</strong> – 这是我们如何和views交互，我们使用typeText(…)方法来在EditText写入hello.</li><li><p><strong>ViewAssertions</strong> – 这是我们的验证类. 我们使用ViewAssertions来验证views的指定属性. 大部分时候你将会使用由ViewMatchers下驱动的ViewAssertions. 在我们上面的例子中withText(…)方法实际上返回一个我们已经使用matchs(…)方法转换成一个ViewAssertion的ViewMatcher.</p><blockquote><p></p><p>Espresso测试的标准模式是find a view(ViewMatchers), 在view上做一些事情(ViewActions), 然后验证view的一些属性(ViewAssertions).</p></blockquote><p>例子：</p><p><pre>`onView(withId(R.id.my_view))      // withId(R.id.my_view) is a ViewMatcher<br>  .perform(click())               // click() is a ViewAction<br>  .check(matches(isDisplayed())); // matches(isDisplayed()) is a ViewAssertion</pre></p></li></ul><p>附上一张官网帮助记忆的小抄：</p><p><a href="http://www.picksomething.cn/wp-content/uploads/2016/04/espresso-cheat-sheet-2.1.0.png" target="_blank" rel="noopener"><img src="http://www.picksomething.cn/wp-content/uploads/2016/04/espresso-cheat-sheet-2.1.0-420x587.png" alt="espresso-cheat-sheet-2.1.0"></a></p><hr><h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><p>执行测试用例有两种方法：</p><ol><li>直接像运行app一样，通过Android Studio选择执行对应的测试程序</li><li>在项目根目录执行：./gradlew :testPreject:connectedAndroidTest</li></ol><hr><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><ol><li><a href="https://google.github.io/android-testing-support-library/" target="_blank" rel="noopener">https://google.github.io/android-testing-support-library/</a></li><li><a href="https://guides.codepath.com/android/UI-Testing-with-Espresso" target="_blank" rel="noopener">https://guides.codepath.com/android/UI-Testing-with-Espresso</a></li><li><a href="https://www.youtube.com/watch?v=OOEDKf06WqA" target="_blank" rel="noopener">https://www.youtube.com/watch?v=OOEDKf06WqA</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近这两周工作相对不那么忙了，所以就抽空结合官方文档研究了一下Android UI测试框架Espresso，从框架的setup到测试用例编写
      
    
    </summary>
    
      <category term="Android" scheme="http://picksomething.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://picksomething.cn/tags/Android/"/>
    
      <category term="Conflict with dependecy" scheme="http://picksomething.cn/tags/Conflict-with-dependecy/"/>
    
      <category term="Espresso" scheme="http://picksomething.cn/tags/Espresso/"/>
    
      <category term="UI自动化测试" scheme="http://picksomething.cn/tags/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Android getIdentifier用法</title>
    <link href="http://picksomething.cn/2016/03/31/Android%20getIdentifier%E7%94%A8%E6%B3%95/"/>
    <id>http://picksomething.cn/2016/03/31/Android getIdentifier用法/</id>
    <published>2016-03-31T14:18:55.000Z</published>
    <updated>2018-04-24T07:51:47.037Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近这段时间在忙着开发一个Android游戏，当然并不是真正的游戏，只是一个伪游戏而已，因为应用需要的图片资源和布局都比较多，所以难免就出现了下面这种类型的代码片段：</p><pre><code>switch (index) {    case 1:        mView = mInflater.inflate(R.layout.layout_gift_one, null);        break;    case 2:        mView = mInflater.inflate(R.layout.layout_gift_two, null);        break;    case 3:        mView = mInflater.inflate(R.layout.layout_gift_three, null);        break;    case 4:        mView = mInflater.inflate(R.layout.layout_gift_four, null);        break;    case 5:        mView = mInflater.inflate(R.layout.layout_gift_five, null);        break;    case 6:        mView = mInflater.inflate(R.layout.layout_gift_six, null);        break;}`&lt;/pre&gt;对于我这种有代码洁癖的人，每次看到这种代码我心里着实是不舒服的，今天上午写代码的时候，遇到一个这样的需求，简化一下大致是这样的：* * *#### 需求&gt; 有6个textview用于显示6种商品的数量，然后定义了一个长度为6的数组用于存放6种商品的数量，那么有一个需求是要在特定的条件下将6种商品的数量置为0，同时在textview显示&lt;!--more--&gt;* * *#### 分析遇到这种问题，数组置0很简单，但是问题来了：6个textview都是从布局文件中获取的，每个textview的资源id不一样，每个textview的名字都不一样，相当于要执行6次`findviewById`和`xxxTextView.setText(&quot;0&quot;)`，我一想到这里，感觉如果这样写简直太丑陋了心想既然标识商品的数量用的就是一个数组，那么可以不可以把6个textview也放到数组里面？正好这两天在stackoverflow上看另一个问题的时候，好像看到过类似的用法，模糊中记得好像是用的getIdentifier，于是就搜索了一下，果然可以，成功的将6个textview用一行代码就放到了一个长度为6的数组中，不用6次findViewById，也不用6次xxTextView.setText(&quot;0&quot;)了，一个循环就搞定了。* * *#### 实现学习要举一反三，学以致用，那么当我再次看到项目中开头那段代码的时候，心里想这个不是也可以使用getIdentifier简化吗，于是简化之后上面的代码就变成这样了。&lt;pre&gt;`int layoutId = getResources().getIdentifier(        &quot;layout_gift_&quot; + index, &quot;layout&quot;, getPackageName());mView = mLayoutInflater.inflate(layoutId, null);`&lt;/pre&gt;是不是看起来整洁了很多* * *#### 扩展然后又点进去getIdentifier方法的源码里面看了一下，用法简介是这样写的：&lt;pre&gt;`/** * Return a resource identifier for the given resource name.  A fully * qualified resource name is of the form &quot;package:type/entry&quot;.  The * first two components (package and type) are optional if defType and * defPackage, respectively, are specified here.**/public int getIdentifier(String name, String defType, String defPackage)`&lt;/pre&gt;也就是说传递参数的方式有两种情况：</code></pre><ol><li><p>第一个参数按照<code>package:type/entry</code>的方式传递的话，那么后面两个type和package参数是可选的，也就是可以传null，就像这样：</p><pre>`int layoutId = getResources().getIdentifier("com.huhulab.xxx:layout/layout_1",null,null);`</pre><p><strong>第一个参数的格式也就是：包名+”:”+资源属性类型+”/“+资源名，其中资源属性类型就是指你要获取的资源是layout，id或者drawable之类的。</strong></p></li><li><p>就是按照我上面的那种方法传递，像这样：</p><p><pre>`int textId = getResources().getIdentifier(<br>“text1”,id,”com.huhulab.xxx”);</pre></p></li></ol><p><strong>三个参数分别是：资源名，资源属性类型，包名</strong></p><hr><h4 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h4><p>当然源码简介里面还有这么一句提示：</p><blockquote><p>Note: use of this function is discouraged.  It is much more<br>  efficient to retrieve resources by identifier than by name.</p></blockquote><p>也就是说并不鼓励使用这个方法，因为通过id获取资源比通过名字获取资源更高效，也就是说这种方法耗时可能会比较久，所以除非必须不要过多使用这个方法<br>当然因为R.layout和R.id等其实都是一个内部类，你也可以通过反射获取类中的某一个变量，也就是你要找的那个资源名</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;最近这段时间在忙着开发一个Android游戏，当然并不是真正的游戏，只是一个伪游戏而已，因为应用需要的图片资源和布局都比较多，所以难免就出现
      
    
    </summary>
    
      <category term="Android" scheme="http://picksomething.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://picksomething.cn/tags/Android/"/>
    
      <category term="getIdentifier" scheme="http://picksomething.cn/tags/getIdentifier/"/>
    
  </entry>
  
  <entry>
    <title>URLConnection.setDoOutput(true)导致Get请求变Post请求？</title>
    <link href="http://picksomething.cn/2016/02/18/URLConnection.setDoOutput(true)%E5%AF%BC%E8%87%B4Get%E8%AF%B7%E6%B1%82%E5%8F%98Post%E8%AF%B7%E6%B1%82%EF%BC%9F/"/>
    <id>http://picksomething.cn/2016/02/18/URLConnection.setDoOutput(true)导致Get请求变Post请求？/</id>
    <published>2016-02-18T15:38:49.000Z</published>
    <updated>2018-04-24T07:46:37.427Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在写一个服务器下载图片并保存到SDcard上的基本功能的时候，部分代码自然而然地写成这样：</p><pre><code>URL url = new URL(params[0]);HttpURLConnection connection = (HttpURLConnection) url.openConnection();connection.setRequestMethod(&quot;GET&quot;);connection.setDoOutput(true);connection.connect();String path = BeautifyUtil.getDownloadsWallpaperPath();File file = new File(path + &quot;/&quot; + mWallpaperInfo.getFileName());FileOutputStream fileOutput = new FileOutputStream(file);InputStream inputStream = connection.getInputStream();`&lt;/pre&gt;当时还特地看了一下`setDoOutput()`方法的源码说明&lt;!--more--&gt;&lt;pre&gt;`/** * Sets the flag indicating whether this {@code URLConnection} allows * output. It cannot be set after the connection is established. * * @param newValue *            the new value for the flag to be set. * @throws IllegalAccessError *             if this method attempts to change the value after the *             connection has been already established. * @see #doOutput */</code></pre><p>我需要将图片流写入到SDcard上，所以设置setDoOutput(true)再合理不过了。。</p><hr><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>然而运行却一直报<code>java.io.FileNotFoundException</code>这样的错误，好奇服务器怎么会返回<code>404 Not Found</code>呢，特定打开图片的连接，看看服务器确实有对应的图片啊，百思不得其解只能Google了，偶然撇到搜索结果有说将<code>setDoOutput()</code>方法的参数改为<code>false</code>就行了，我抱着不解的态度试试，居然真好了。</p><h4 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h4><p>但是总不能到这就结束了啊，总要搞清楚为什么会这样啊，继续不懈的搜索，发现了这篇文章:<a href="http://webdiary.com/tag/httpurlconnection/" target="_blank" rel="noopener">Android 4.0 turns GET into POST</a></p><p>据说设置<code>setDoOutput(true)</code>之后，Android会认为这是一个POST请求，那么一旦服务器不支持POST请求，或者虽然支持，但是必须的参数你没有传过去，那么就会返回<code>404 NOT FOUND</code>，就有了上面的那个<code>FileNotFound</code>的异常了</p><hr><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://stackoverflow.com/questions/8587913/what-exactly-does-urlconnection-setdooutput-affect" target="_blank" rel="noopener">What exactly does URLConnection.setDoOutput() affect?</a></p></li><li><p><a href="http://comments.gmane.org/gmane.comp.handhelds.android.devel/195330" target="_blank" rel="noopener">Ice Cream Sandwich networking problems</a></p></li><li><p><a href="http://webdiary.com/tag/httpurlconnection/" target="_blank" rel="noopener">Android 4.0 turns GET into POST</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;在写一个服务器下载图片并保存到SDcard上的基本功能的时候，部分代码自然而然地写成这样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;URL url =
      
    
    </summary>
    
      <category term="Android" scheme="http://picksomething.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://picksomething.cn/tags/Android/"/>
    
      <category term="setDoOutput" scheme="http://picksomething.cn/tags/setDoOutput/"/>
    
  </entry>
  
  <entry>
    <title>ViewPager+Fragment+自定义Tab的使用</title>
    <link href="http://picksomething.cn/2016/01/12/ViewPager+Fragment+%E8%87%AA%E5%AE%9A%E4%B9%89Tab%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://picksomething.cn/2016/01/12/ViewPager+Fragment+自定义Tab的使用/</id>
    <published>2016-01-12T06:19:15.000Z</published>
    <updated>2018-04-24T07:46:37.427Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，Google在Android Design Supprot Library增加了很多Material Design控件，使我们能够更加轻松地开发出很多美观又灵活的UI。</p><p>其中新增的Tabs就是一个很实用的控件，我们可以使用Tabs+ViewPager+Fragment写出很多实用的控件，如图一所示，关于Tabs控件的更多信息，大家可以阅读官方文档：<a href="https://www.google.com/design/spec/components/tabs.html#" target="_blank" rel="noopener">点击这里</a><br><a href="http://www.picksomething.cn/wp-content/uploads/2016/01/components_tabs_usage_mobile4.png" target="_blank" rel="noopener"><img src="http://www.picksomething.cn/wp-content/uploads/2016/01/components_tabs_usage_mobile4-420x355.png" alt="components_tabs_usage_mobile4"></a></p><p>但是，有些时候我们的需求可能不是正好会和官方提供的控件相吻合，受限于这些官方Material Design控件都是遵循固定的设计标准，有些时候我们不得不自己重写控件，或者寻求其它实现方式，比如如图二所示的UI：<br><a href="http://www.picksomething.cn/wp-content/uploads/2016/01/QQ20160112-0.png" target="_blank" rel="noopener"><img src="http://www.picksomething.cn/wp-content/uploads/2016/01/QQ20160112-0.png" alt="QQ20160112-0"></a><br>因为官方的Tabs控件每个Tab是有最小宽度的(看源码好像是56dp)，也就是说无论你字体设置多小，每个Tab的最小宽度都不会变，而且图二在Tab的右边还要添加一些单个的控件，这个时候显然我们自己定义Tab布局，然后结合ViewPager和Fragment使用起来更方便，图二中的每个Tab项的宽度我们可以随便调，在右边可以随意添加单独控件。<br><a id="more"></a><br>下面讲一下图二的实现过程，其实主要就是在上方加入一个Tab布局，然后通过给ViewPager设置OnPageChangeListener监听器来动态改变Tab下面的Indicator Line的leftMargin来实现滑动效果，全部源码链接在文章末尾，下面列出主要实现代码：</p><p><strong>1、首先是主界面上方的Tab布局</strong></p><p>这个布局中主要就是上方的三个tab和最右边的一个imageView已经tab下方的indicatorLine，布局很简单，源代码就不再列出，感兴趣的可以参考文章最后的源码链接，不再赘述</p><p><strong>2、FragmentPagerAdapter适配器</strong></p><pre><code>public class BeautifyFragmentAdapter extends FragmentPagerAdapter {    private final List mFragments = new ArrayList&amp;lt;&amp;gt;();    public BeautifyFragmentAdapter(FragmentManager fm) {        super(fm);    }    public void addFragment(Fragment fragment) {        mFragments.add(fragment);    }    @Override    public Fragment getItem(int position) {        return mFragments.get(position);    }    @Override    public int getCount() {        return mFragments.size();    }}`&lt;/pre&gt;**3、定义Fragment用来展示数据**&lt;pre&gt;`public class BeautifyMainFragment extends Fragment {    public static final String PAGES_TYPE = &quot;pages_type&quot;;    public static final int TYPE_WALLPAPER = 0;    public static final int TYPE_THEME = 1;    public static final int TYPE_FONT = 2;    private int mPageType;    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        mPageType = getArguments().getInt(PAGES_TYPE);    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,             Bundle savedInstanceState) {        View view = inflater.inflate(R.layout.layout_beautify_fragment_list,              container, false);        textView.setText(&quot;第&quot; + mPageType + &quot;页&quot;);        return view;    }}`&lt;/pre&gt;**4、为ViewPager设置Adapter，关键代码如下：**&lt;pre&gt;`private void setupViews() {    mAdapter = new BeautifyFragmentAdapter(getSupportFragmentManager());    Bundle wallpaperData = new Bundle();    wallpaperData.putInt(BeautifyMainFragment.PAGES_TYPE,          BeautifyMainFragment.TYPE_WALLPAPER);    BeautifyMainFragment wallpaper = new BeautifyMainFragment();    wallpaper.setArguments(wallpaperData);    mAdapter.addFragment(wallpaper);    Bundle themeData = new Bundle();    themeData.putInt(BeautifyMainFragment.PAGES_TYPE,           BeautifyMainFragment.TYPE_THEME);    BeautifyMainFragment theme = new BeautifyMainFragment();    theme.setArguments(themeData);    mAdapter.addFragment(theme);    Bundle fontData = new Bundle();    fontData.putInt(BeautifyMainFragment.PAGES_TYPE,            BeautifyMainFragment.TYPE_FONT);    BeautifyMainFragment font = new BeautifyMainFragment();    font.setArguments(fontData);    mAdapter.addFragment(font);    viewPager.setAdapter(mAdapter);    viewPager.setCurrentItem(0);    viewPager.addOnPageChangeListener(onPageChangeListener);}`&lt;/pre&gt;这里只使用了一个Fragment文件，然后通过添加不同的参数来区分属于不同的page，当然也可以使用三个不同的Fragment文件针对不同的Tab，看个人习惯了。**5、重写onPageScrolled方法实现indicatorLine的滑动**&lt;pre&gt;`ViewPager.OnPageChangeListener onPageChangeListener = new ViewPager.OnPageChangeListener() {        /**         * position:当前页面，以及你点击滑动的页面         * offset:当前页面偏移的百分比         * offsetPixels:当前页面偏移的像素位置         */        @Override        public void onPageScrolled(int position, float offset, int offsetPixels) {            FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams)                    indicatorLine.getLayoutParams();            /**             * 利用currentIndex(当前所在页面)和position以及offset来             * 设置indicatorLine的左边距，这里有3个页面 滑动场景：             * 从左到右分别为0,1,2             * 0-&amp;gt;1; 1-&amp;gt;2; 2-&amp;gt;1; 1-&amp;gt;0             */            if (currentIndex == 0 &amp;amp;&amp;amp; position == 0) { // 0-&amp;gt;1                lp.leftMargin = (int) (offset * tabWidthPx                        + currentIndex * tabWidthPx);            } else if (currentIndex == 1 &amp;amp;&amp;amp; position == 0) { // 1-&amp;gt;0                lp.leftMargin = (int) (-(1 - offset) * tabWidthPx                        + currentIndex * tabWidthPx);            } else if (currentIndex == 1 &amp;amp;&amp;amp; position == 1) { // 1-&amp;gt;2                lp.leftMargin = (int) (offset * tabWidthPx                        + currentIndex * tabWidthPx);            } else if (currentIndex == 2 &amp;amp;&amp;amp; position == 1) { // 2-&amp;gt;1                lp.leftMargin = (int) (-(1 - offset) * tabWidthPx                        + currentIndex * tabWidthPx);            }            indicatorLine.setLayoutParams(lp);        }        @Override        public void onPageSelected(int position) {            resetTextView();            switch (position) {                case 0:                    wallpaperTitle.setTextColor(ContextCompat.getColor(                            BeautifyMainActivity.this, R.color.bm_tab_text_selected));                    break;                case 1:                    themeTitle.setTextColor(ContextCompat.getColor(                            BeautifyMainActivity.this, R.color.bm_tab_text_selected));                    break;                case 2:                    fontTitle.setTextColor(ContextCompat.getColor(                            BeautifyMainActivity.this, R.color.bm_tab_text_selected));                    break;            }            currentIndex = position;        }        /**         * state:滑动中的状态 有三种状态（0，1，2） 0：什么都没做 1：正在滑动 2：滑动完毕          */        @Override        public void onPageScrollStateChanged(int state) {        }    };    /**     * 重置颜色     */    private void resetTextView() {        wallpaperTitle.setTextColor(ContextCompat.getColor(            this, R.color.bm_tab_text));        themeTitle.setTextColor(ContextCompat.getColor(            this, R.color.bm_tab_text));        fontTitle.setTextColor(ContextCompat.getColor(            this, R.color.bm_tab_text));    }</code></pre><p>Ok，到这里自定义的Tab+ViewPager+Fragment基本就实现了<br>源码地址：<a href="https://github.com/picksomething/ViewPagerWithTab" target="_blank" rel="noopener">https://github.com/picksomething/ViewPagerWithTab</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道，Google在Android Design Supprot Library增加了很多Material Design控件，使我们能够更加轻松地开发出很多美观又灵活的UI。&lt;/p&gt;
&lt;p&gt;其中新增的Tabs就是一个很实用的控件，我们可以使用Tabs+ViewPager+Fragment写出很多实用的控件，如图一所示，关于Tabs控件的更多信息，大家可以阅读官方文档：&lt;a href=&quot;https://www.google.com/design/spec/components/tabs.html#&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击这里&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.picksomething.cn/wp-content/uploads/2016/01/components_tabs_usage_mobile4.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;http://www.picksomething.cn/wp-content/uploads/2016/01/components_tabs_usage_mobile4-420x355.png&quot; alt=&quot;components_tabs_usage_mobile4&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是，有些时候我们的需求可能不是正好会和官方提供的控件相吻合，受限于这些官方Material Design控件都是遵循固定的设计标准，有些时候我们不得不自己重写控件，或者寻求其它实现方式，比如如图二所示的UI：&lt;br&gt;&lt;a href=&quot;http://www.picksomething.cn/wp-content/uploads/2016/01/QQ20160112-0.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;http://www.picksomething.cn/wp-content/uploads/2016/01/QQ20160112-0.png&quot; alt=&quot;QQ20160112-0&quot;&gt;&lt;/a&gt;&lt;br&gt;因为官方的Tabs控件每个Tab是有最小宽度的(看源码好像是56dp)，也就是说无论你字体设置多小，每个Tab的最小宽度都不会变，而且图二在Tab的右边还要添加一些单个的控件，这个时候显然我们自己定义Tab布局，然后结合ViewPager和Fragment使用起来更方便，图二中的每个Tab项的宽度我们可以随便调，在右边可以随意添加单独控件。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://picksomething.cn/categories/Android/"/>
    
    
      <category term="Fragment" scheme="http://picksomething.cn/tags/Fragment/"/>
    
      <category term="Tab" scheme="http://picksomething.cn/tags/Tab/"/>
    
      <category term="ViewPager" scheme="http://picksomething.cn/tags/ViewPager/"/>
    
  </entry>
  
  <entry>
    <title>生病这半月</title>
    <link href="http://picksomething.cn/2015/12/20/%E7%94%9F%E7%97%85%E8%BF%99%E5%8D%8A%E6%9C%88/"/>
    <id>http://picksomething.cn/2015/12/20/生病这半月/</id>
    <published>2015-12-20T11:06:28.000Z</published>
    <updated>2018-04-24T07:46:37.426Z</updated>
    
    <content type="html"><![CDATA[<p>11月27号，周五，上班的时候感觉要有点感冒，心想昨夜打球可能着凉了，想着多喝点开水，也许就不会感冒了</p><p>11月28号，周六，在家睡觉不想起，感觉浑身很冷，想着可能有点发烧，拿出体温计量了一下38度多，难受了一整天，到夜里都接近39度了，喝了点感冒退烧药就睡去了，心想明天还发烧一定要去看医生</p><p>11月29号，周日，依然发烧，并且开始咳嗽，因为四月份刚来杭州，这是来杭州第一次生病，也不知道附近哪里有看病的地方，想着一个感冒发烧也用不着去大医院吧，手机搜索了一下，附近不远有浙江大学紫金港校区医院，心想校医院就可以了吧，于是下午就去了浙大紫金港校医院，可能是因为周末的缘故，里面人不多，医生也不多，很多科室都是没人的，只有值班的在急诊室，于是挂号去看病，(之前在深圳工作的时候看病只需要一个医保卡就可以了，在杭州也办理了市民卡，也就是医保卡，没想到试用的时候还需要病历本，于是医保就没用成)，到了急诊室，医生问了一点情况，让先量个体温，38.7度，医生说怎么温度这么高，让去化验血，于是就去化验血(其实这些套路，我都清楚，上大学的时候发烧到校医院也是会让去验血)，验血说超敏高出十多倍，于是让输液，我想着输完液应该就没事了吧，我本身也就是要来输液的，因为之前每次发烧都是会输液的。医生还给开了两片退烧药，并告知明天要来复查一下血，我心想难道一天就可以输好吗，以前每次发烧去看病，医生都会让输两天液<br><a id="more"></a><br>输完液出来天已经黑了，但是我并没有觉得有什么好转，心里还想着可能没那么快，夜里回去睡个觉就好了，但是夜里回去依然很难受，依然高烧，吃了一片退烧药还是高烧接近39度，整夜睡不着，心想明天肯定是上不了班了，还是要输液</p><p>11月30号，周一，早上依然发烧，咳嗽也有加重的倾向，又吃了一片退烧药之后我就打车去了浙大校医院，周一里面各科室的医生都上班了，这次我挂完号来到二楼内科，然后简单说了一下情况，医生说一天病毒肯定没有降下去，今天不用验血了，听说我持续发高烧不退，怀疑我是肺炎，让去拍个胸片，结果出来之后，医生看了看说好像也没什么，说昨天医生给我开的抗病毒的药换掉，今天再输一天，明天再来复查血，输完液之后，也没什么胃口，就直接回家了，心想着看来段时间内病可能不会好了，我要去领一下病历本，不然每次自费也挺贵的，于是问了老板到哪里可以领病历本，老板一会就把地址发过来了，还好很近，一个起步价，我领完回来就睡了，但是感觉并没有什么好转</p><p>夜里睡觉的时候温度已经超过39度了，整夜又是熬过去的</p><p>12月1号，周二，早上睡完觉之后，中午随便吃了点东西然后就又去浙大紫金港校医院，我还是去看的同一个医生，告诉医生我昨天夜里回去还是发烧都已经发烧到39度多了，医生先让我去复查了一下血，超敏那一项不但没降反而还升高了，医生又让我拍个胸片，我没多想就去拍了，结果还是没事，我给医生看片子的时候，我说要不要拿出昨天的片子对比一下，医生才意识到昨天让我拍过，居然向我说对不起，说忘记了，让我又多拍了一次片子，我说没事，我心想可能今天病情加重了，再拍一次也很正常啊，只要能够找到病因就好啊，医生还是很愧疚，还去向内科主任检讨了一下，弄的我还挺不好意思的</p><p>拍片显示没什么问题，医生说还是只能当做支气管炎来治，然后说昨天用的药都没问题，今天把头孢换成进口的，然后开两天的药，输完两天再看看，因为我咳嗽加重，我让医生顺便给我开点咳嗽药，医生开了强力枇杷露，输完液吃点东西就回去了，夜里喝完药之后还是发烧，而且咳嗽严重，我想着不行了，如果明天的输完再没有好转，我要去大医院了</p><p>12月2号，周三，我上午睡了一会，然后起床继续去输液，去输液之前我去又问了一下医生，我说我昨夜回去依然高烧，医生感觉也很无能为力了，建议我去大医院，说附近的同德医院也不远，建议我去那边看，之前老板推荐我去绿城医院，我就问医生绿城医院怎样，医生说绿城医院是专科医院，呼吸道问题还是同德好一些，我说好，等今天输完液再不退烧，我就去大医院</p><p>然而输完液回去，夜里依然发烧，而且整夜咳嗽，难受的不行，我想着明天必须去大医院了</p><p>12月3号，周四，我决定还是听老板的建议去绿城医院，十点多去的，和医生说明了情况，并拿出之前校医院拍的胸片和所使用的药，绿城医院的医生建议我拍个胸部CT看的清楚一些，我想先验血看看超敏指标降下来没有，验血结果依然很高，医生说你这个指标已经很高了，让我去拍CT，拍完CT告知要两个小时才能拿到结果，于是就在医院等，中间出去买了一个包子也没有吃完，这个时候已经感觉咳嗽的时候，背部都开始疼了</p><p>下午1点半上班，医院上班了，我就去拿我的CT片子和结果，三张片子，然后我看到诊断结果那张纸下面的映像诊断下写着：两肺多节段炎症，建议治疗后复查，我心想结果可能不太好，我拿着片子去找医生，医生看了之后说肺炎啊，然后对着片子看，说你这肺炎已经很严重了啊，需要住院啊，当时我内心挺不好受的，然后医生就打电话问内科住院部还有床位不，结果是没有了，医生又打电话问急诊室，急诊室说还有一张床位，然后就安排我过去了，我问要多久医生说你这情况比较严重7到10天吧，办好住院手续之后，我和急诊室的护士说我要回去拿点生活用品，然后护士说好，说最好洗个澡，因为急诊室病房没法洗澡，然后我回去洗洗澡，带着必须生活用品就去医院了</p><p>进去之后就开始输液做雾化了，然后还有一个医生过来说我这种情况比较严重，至少要10天以上，当时我心里是很难接受这个结果的，但是也没任何办法，住院的第一夜还是发烧很难受，夜里睡不着，护士告诉我第二天有很多检查，让我早上先不要吃东西</p><p>12月4号，周五，早上五点多左右，护士已经过来给我抽血，抽了很多管血，然后给了我几个单子，让我去等到8点的时候开始去检查，里面有心脏超声波，B超，心电图，我心想为什么我确诊肺炎了，还要做心脏这些检查呢</p><p>检查完之后吃个包子就又回去输液了，还好下午护士来告知内科住院部已经有空床了，问我上去不，我心想肯定上去啊，就说好，然后急诊部的护士就带着我去了内科8楼住院部，交接了一下情况，我被安排在一个四人间里面，还好空间很大</p><p>12月5号，周六，我已经不怎么发高烧了，维持在37.5度一下，每天的治疗就是三次输液，早上8点一次，下午三点一次，夜里11点一次，三次雾化，三次口服药</p><p>12月12号，周六，住院的第十天，复查CT，我以为可以出院了，因为感觉除了咳嗽，其他都好的差不多了，下午结果出来之后，医生告诉我吸收的不错，但是因为今天我的主管医生没上班，所以今天不能出院，我问医生那我明天主管医生来了我可以出院吗，医生告诉我应该可以，CT结果显示挺好的，心想那就在住一夜吧，明天周日，也不急</p><p>12月13号，周日，早上没输液前我信心满满地就问主管医生今天可以出院吗，结果主管医生说你看片子，还是有一快很明显的地方没有吸收，今天不能出院，建议我再住3-4天问我能坚持吗，我心里一凉，坚持说我想今天出院，给我开点药，我今天下午输完液出去，医生看我坚持也同意了，不过告诉我这样风险比较大，一旦我又发烧，或者出汗，以及咳嗽加重一定要及时来医院，到病房输液的时候我心里很忐忑，想早点回去工作，却又担心万一病情反复加重怎么办，纠结了很久我心想还是再住一天，我周一下午输完液再走吧，于是我就去告诉医生，我今天不走，等周一下午输完液再走，医生说好</p><p>12月14号，周一，今天我感觉还是不太好，早上医生查房的时候问我今天出院，下午的液还输不输，我说输完吧，然后医生说那就下午输完液出院，我又问医生，我这样出院没吸收那块炎症是好的可能性大还是严重的可能性大，医生说好的可能性大，但是我还是不放心，因为咳嗽依然很多，我就说我还是再住一夜，明天上午输完液再走吧，医生笑笑说好</p><p>12月15号，周二，今天感觉比昨天好多了，上午输完液之后已经10点了，我决定就今天出院，办完出院手续拿好药之后就回来了</p><p>坦白讲出院的感觉真好，回来收拾收拾，然后换换衣服洗洗头就去公司了，到公司就11点半了，好久没有工作了，感觉打字都很别扭，但是工作的感觉真是好，摸着电脑写代码的感觉真是好，健康真好</p><p>还好我在浙大校医院没有耽误太久，还好我去了大医院，还好我去了绿城医院，听病房里面其他人说同德医院病房很脏，还没床位，而且服务态度也很差</p><p>住院这半个月，我是打心底感谢绿城医院的医生和护士，尤其是护士，她们实在是太辛苦，走的时候填反馈表的时候，因为留的空间太小，不然我真的要好好的表扬一下每个护士，这次住院，一来意识到健康的重要性，二来就是真的打心底尊敬护士，她们才是最累，最辛苦的人，但是却一直笑脸相迎</p><p>最后，祝每一个人身体健康，同时也祝每一位护士工作顺利</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;11月27号，周五，上班的时候感觉要有点感冒，心想昨夜打球可能着凉了，想着多喝点开水，也许就不会感冒了&lt;/p&gt;
&lt;p&gt;11月28号，周六，在家睡觉不想起，感觉浑身很冷，想着可能有点发烧，拿出体温计量了一下38度多，难受了一整天，到夜里都接近39度了，喝了点感冒退烧药就睡去了，心想明天还发烧一定要去看医生&lt;/p&gt;
&lt;p&gt;11月29号，周日，依然发烧，并且开始咳嗽，因为四月份刚来杭州，这是来杭州第一次生病，也不知道附近哪里有看病的地方，想着一个感冒发烧也用不着去大医院吧，手机搜索了一下，附近不远有浙江大学紫金港校区医院，心想校医院就可以了吧，于是下午就去了浙大紫金港校医院，可能是因为周末的缘故，里面人不多，医生也不多，很多科室都是没人的，只有值班的在急诊室，于是挂号去看病，(之前在深圳工作的时候看病只需要一个医保卡就可以了，在杭州也办理了市民卡，也就是医保卡，没想到试用的时候还需要病历本，于是医保就没用成)，到了急诊室，医生问了一点情况，让先量个体温，38.7度，医生说怎么温度这么高，让去化验血，于是就去化验血(其实这些套路，我都清楚，上大学的时候发烧到校医院也是会让去验血)，验血说超敏高出十多倍，于是让输液，我想着输完液应该就没事了吧，我本身也就是要来输液的，因为之前每次发烧都是会输液的。医生还给开了两片退烧药，并告知明天要来复查一下血，我心想难道一天就可以输好吗，以前每次发烧去看病，医生都会让输两天液&lt;br&gt;
    
    </summary>
    
      <category term="Twitter" scheme="http://picksomething.cn/categories/Twitter/"/>
    
    
  </entry>
  
  <entry>
    <title>RecyclerView with header and footer</title>
    <link href="http://picksomething.cn/2015/11/06/RecyclerView%20with%20header%20and%20footer/"/>
    <id>http://picksomething.cn/2015/11/06/RecyclerView with header and footer/</id>
    <published>2015-11-06T02:10:10.000Z</published>
    <updated>2018-04-24T07:46:37.426Z</updated>
    
    <content type="html"><![CDATA[<p>最近在实现图1这个设置页面的时候，第一眼看到设计稿的时候只是想着普通的LinearLayout加一些常见的ui控件就足够了，但是细想一下觉得这样布局里面重复的代码太多，而且后面要是再多添加几项设置或者删除某项设置，改动也挺大的，想着用RecyclerView带上header合footer实现起来更加合理，于是就使用RecyclerView实现了。</p><p><a href="http://www.picksomething.cn/wp-content/uploads/2015/11/QQ20151106-0.png" target="_blank" rel="noopener"><img src="http://www.picksomething.cn/wp-content/uploads/2015/11/QQ20151106-0.png" alt="QQ20151106-0"></a><strong>图1</strong></p><p>在用带header和footer的RecyclerView实现之前必须先确定好header和footer的布局，我是这样分类header和footer的，见图2:</p><p><a href="http://www.picksomething.cn/wp-content/uploads/2015/11/QQ20151106-1.png" target="_blank" rel="noopener"><img src="http://www.picksomething.cn/wp-content/uploads/2015/11/QQ20151106-1.png" alt="QQ20151106-1"></a><strong>图2</strong></p><p>之所以把记录提醒也算到header里面而不是普通的一个item里面是因为记录提醒这个设置项点击开启之后，会在其下方出来一个提示时间的显示和修改的布局，当然这并不是说不能把记录提醒当做一个item处理，完全可以的，我只是偷点懒而已<br><a id="more"></a><br>那么选择好header和footer之后，接下来就是编程实现了，这里主要是适配器的代码来控制header，item和footer，所以只贴出适配器的代码，其他在activity为RecyclerView设置LayoutManager和适配器这部分代码都很简单了，适配器代码如下，部分地方已标注：</p><pre><code>public class SettingAdapter extends RecyclerView.Adapter {    private static final int TYPE_HEADER = 0;    private static final int TYPE_ITEM = 1;    private static final int TYPE_FOODER = 2;    private Context mContext;    private List mList;    public SettingAdapter(Context context, List list) {        L.d(&quot;SettingAdapter Construction list size = &quot; + list.size());        mContext = context;        mList = list;    }    @Override    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        if (viewType == TYPE_ITEM) {            View item = LayoutInflater.from(mContext)                    .inflate(R.layout.layout_settings_item, parent, false);            return new SettingItemVH(item);        } else if (viewType == TYPE_HEADER) {            View header = LayoutInflater.from(mContext)                    .inflate(R.layout.layout_settings_header, parent, false);            return new SettingHeaderVH(header);        } else if (viewType == TYPE_FOODER) {            View footer = LayoutInflater.from(mContext)                    .inflate(R.layout.layout_settings_footer, parent, false);            return new SettingFooterVH(footer);        }        throw new RuntimeException(&quot;there is no type matches the type &quot; + viewType);    }    @Override    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {        if (holder instanceof SettingItemVH) {            SettingItem settingItem = getItem(position);            ((SettingItemVH) holder).mIcon.setImageResource(settingItem.getIcon());            ((SettingItemVH) holder).mTitle.setText(settingItem.getTitle());        } else if (holder instanceof SettingHeaderVH) {        }    }    @Override    public int getItemCount() {        // 因为多了header和footer这里要+2        return mList.size() + 2;    }    //根据position获取ViewType    @Override    public int getItemViewType(int position) {        if (isHeader(position))            return TYPE_HEADER;        else if (isFooter(position))            return TYPE_FOODER;        return TYPE_ITEM;    }    //第一个item是header    private boolean isHeader(int position) {        return position == 0;    }    //最后一个item是footer    private boolean isFooter(int position) {        return position == getItemCount()-1;    }    //正常的item是从1开始的，0是header，所以获取正常item的时候是position-1    private SettingItem getItem(int position) {        return mList.get(position - 1);    }    class SettingItemVH extends RecyclerView.ViewHolder {        private ImageView mIcon;        private TextView mTitle;        public SettingItemVH(View itemView) {            super(itemView);            mIcon = (ImageView) itemView.findViewById(R.id.setting_item_icon);            mTitle = (TextView) itemView.findViewById(R.id.setting_item_title);        }    }    class SettingHeaderVH extends RecyclerView.ViewHolder {        public SettingHeaderVH(View itemView) {            super(itemView);        }    }    class SettingFooterVH extends RecyclerView.ViewHolder {        public SettingFooterVH(View itemView) {            super(itemView);        }    }}</code></pre><p>这里需要注意的就是getItem的时候是position-1，因为设置item是从第一个开始的，第0个被header占用了，为了获取传进来的list中的索引为0的设置item，就要用position-1。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在实现图1这个设置页面的时候，第一眼看到设计稿的时候只是想着普通的LinearLayout加一些常见的ui控件就足够了，但是细想一下觉得这样布局里面重复的代码太多，而且后面要是再多添加几项设置或者删除某项设置，改动也挺大的，想着用RecyclerView带上header合footer实现起来更加合理，于是就使用RecyclerView实现了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.picksomething.cn/wp-content/uploads/2015/11/QQ20151106-0.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;http://www.picksomething.cn/wp-content/uploads/2015/11/QQ20151106-0.png&quot; alt=&quot;QQ20151106-0&quot;&gt;&lt;/a&gt;&lt;strong&gt;图1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在用带header和footer的RecyclerView实现之前必须先确定好header和footer的布局，我是这样分类header和footer的，见图2:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.picksomething.cn/wp-content/uploads/2015/11/QQ20151106-1.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;http://www.picksomething.cn/wp-content/uploads/2015/11/QQ20151106-1.png&quot; alt=&quot;QQ20151106-1&quot;&gt;&lt;/a&gt;&lt;strong&gt;图2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之所以把记录提醒也算到header里面而不是普通的一个item里面是因为记录提醒这个设置项点击开启之后，会在其下方出来一个提示时间的显示和修改的布局，当然这并不是说不能把记录提醒当做一个item处理，完全可以的，我只是偷点懒而已&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://picksomething.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://picksomething.cn/tags/Android/"/>
    
      <category term="footer" scheme="http://picksomething.cn/tags/footer/"/>
    
      <category term="header" scheme="http://picksomething.cn/tags/header/"/>
    
      <category term="RecyclerView" scheme="http://picksomething.cn/tags/RecyclerView/"/>
    
  </entry>
  
  <entry>
    <title>使用merge标签替换FrameLayout布局</title>
    <link href="http://picksomething.cn/2015/10/15/%E4%BD%BF%E7%94%A8merge%E6%A0%87%E7%AD%BE%E6%9B%BF%E6%8D%A2FrameLayout%E5%B8%83%E5%B1%80/"/>
    <id>http://picksomething.cn/2015/10/15/使用merge标签替换FrameLayout布局/</id>
    <published>2015-10-14T16:59:42.000Z</published>
    <updated>2018-04-24T07:46:37.426Z</updated>
    
    <content type="html"><![CDATA[<p>前两天使用Android Lint检测项目代码的时候，突然发现有这么一条提示:</p><pre><code>Warning: This  can be replaced with a  tag</code></pre><p>当时觉得挺好奇的，心想FrameLayout怎么可以被merge标签替代呢，然后就随手google了一下，发现还是有很多知识呢</p><p>首先官方文档对于标签的解释是：当在另一个布局里面包含一个布局的时候，它有助于消除视图层次中的冗余视图，那么我们来分析一下为什么建议使用替换布局：<br><a id="more"></a><br>假如你有两个布局文件，分别为layout1.xml和layout2.xml<br>layout1.xml:<br><a href="http://www.picksomething.cn/wp-content/uploads/2015/10/QQ20151015-0@2x.png" target="_blank" rel="noopener"><img src="http://www.picksomething.cn/wp-content/uploads/2015/10/QQ20151015-0@2x.png" alt="QQ20151015-0@2x"></a> layout2.xml:<br><a href="http://www.picksomething.cn/wp-content/uploads/2015/10/QQ20151015-1@2x.png" target="_blank" rel="noopener"><img src="http://www.picksomething.cn/wp-content/uploads/2015/10/QQ20151015-1@2x.png" alt="QQ20151015-1@2x"></a> 那么通过使用标签，layout1.xml最后等同于是这样的：<br><a href="http://www.picksomething.cn/wp-content/uploads/2015/10/QQ20151015-2@2x.png" target="_blank" rel="noopener"><img src="http://www.picksomething.cn/wp-content/uploads/2015/10/QQ20151015-2@2x.png" alt="QQ20151015-2@2x"></a> 那么看起来layout2.xml的FrameLayout布局是多余的，于是我们就可以通过标签来避免重复嵌套，从而减少试图嵌套层次。</p><p>layout2.xml使用标签后，如下所示：<br><a href="http://www.picksomething.cn/wp-content/uploads/2015/10/QQ20151015-3@2x.png" target="_blank" rel="noopener"><img src="http://www.picksomething.cn/wp-content/uploads/2015/10/QQ20151015-3@2x.png" alt="QQ20151015-3@2x"></a> 那么这样修改layout2.xml之后，layout1.xml最终的布局就等同于如下所示：<br><a href="http://www.picksomething.cn/wp-content/uploads/2015/10/QQ20151015-1@2x.png" target="_blank" rel="noopener"><img src="http://www.picksomething.cn/wp-content/uploads/2015/10/QQ20151015-1@2x.png" alt="QQ20151015-1@2x"></a> 这样一来，就不存在多余的FrameLayout布局了，顺利的减少试图层次的冗余了。</p><p>Android官方博客关于Android布局优化中有一篇博客是专门讲标签的，感兴趣的可以去看一下:<a href="http://android-developers.blogspot.jp/2009/03/android-layout-tricks-3-optimize-by.html" target="_blank" rel="noopener">点击查看</a></p><p>参考文档：(需要翻墙)<br><a href="http://developer.android.com/intl/zh-cn/training/improving-layouts/reusing-layouts.html" target="_blank" rel="noopener">http://developer.android.com/intl/zh-cn/training/improving-layouts/reusing-layouts.html</a><br><a href="http://stackoverflow.com/questions/8834898/what-is-the-purpose-of-androids-merge-tag-in-xml-layouts" target="_blank" rel="noopener">http://stackoverflow.com/questions/8834898/what-is-the-purpose-of-androids-merge-tag-in-xml-layouts</a><br><a href="http://android-developers.blogspot.jp/2009/03/android-layout-tricks-3-optimize-by.html" target="_blank" rel="noopener">http://android-developers.blogspot.jp/2009/03/android-layout-tricks-3-optimize-by.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两天使用Android Lint检测项目代码的时候，突然发现有这么一条提示:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Warning: This  can be replaced with a  tag
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当时觉得挺好奇的，心想FrameLayout怎么可以被merge标签替代呢，然后就随手google了一下，发现还是有很多知识呢&lt;/p&gt;
&lt;p&gt;首先官方文档对于标签的解释是：当在另一个布局里面包含一个布局的时候，它有助于消除视图层次中的冗余视图，那么我们来分析一下为什么建议使用替换布局：&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://picksomething.cn/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Android Ripple Animation-涟漪动画</title>
    <link href="http://picksomething.cn/2015/09/28/Android%20Ripple%20Animation-%E6%B6%9F%E6%BC%AA%E5%8A%A8%E7%94%BB/"/>
    <id>http://picksomething.cn/2015/09/28/Android Ripple Animation-涟漪动画/</id>
    <published>2015-09-28T15:16:20.000Z</published>
    <updated>2018-04-24T07:46:37.426Z</updated>
    
    <content type="html"><![CDATA[<p>因为开发launcher的桌面启动动画的时候，根据设计师的要求，需要实现一个涟漪的效果，具体效果如下：<br><a href="http://www.picksomething.cn/wp-content/uploads/2015/09/ezgif.com-crop.gif" target="_blank" rel="noopener"><img src="http://www.picksomething.cn/wp-content/uploads/2015/09/ezgif.com-crop.gif" alt="ezgif.com-crop"></a> 然后动画的具体细节要求是这样的：<br><a href="http://www.picksomething.cn/wp-content/uploads/2015/09/QQ20150928-2@2x.png" target="_blank" rel="noopener"><img src="http://www.picksomething.cn/wp-content/uploads/2015/09/QQ20150928-2@2x-744x159.png" alt="QQ20150928-2@2x"></a> <a id="more"></a><br>然后google搜索了一下涟漪效果，发现github上有一些类似的开源库，但是发现大部分都是点击按钮然后开始出现涟漪效果，与自己要做的这个涟漪动画不太符合，所以在dwl的指引下，想着干脆自己实现一个算了，于是就尝试着自定义这个涟漪动画，最终实现的效果就和上面的是一样的，下面阐述一下实现原理。</p><p>首先我们将这个动画看成是一个圆环，圆环里面的校园是一个空心的透明圆，外面是一个透明的大圆，draw圆环的原理很简单，就是在draw透明圆的基础上，将画笔paint的strokeWidth设置成外面的环的宽度。<span style="color: #ff0000;"><strong>这里需要注意的是，事实上通过设置strokeWidth之后draw出来的外面大圆的半径并不是简单的内圆的半径加上圆环的宽度，而是内圆的半径+1/2圆环的宽度。</strong></span>如下图所示，红色的就是半径就是我们在draw圆环外面大圆的时候应该设置的半径，然后将笔宽strokeWidth设置为圆环的宽度即可：<br><a href="http://www.picksomething.cn/wp-content/uploads/2015/09/QQ20150928-3@2x.png" target="_blank" rel="noopener"><img src="http://www.picksomething.cn/wp-content/uploads/2015/09/QQ20150928-3@2x-744x304.png" alt="QQ20150928-3@2x"></a> 那么知道draw圆环的原理之后，下面就可以开始draw了，里面的小圆很简单：</p><pre><code>canvas.drawCircle(centerX, centerY, mCircleRadius, mCirclePaint);`&lt;/pre&gt;那么外面的大圆也很简单：&lt;pre&gt;`canvas.drawCircle(centerX, centerY, mCircleRadius + mRippleWidth / 2, mRipplePaint);`&lt;/pre&gt;**重点就是mRippleWidth这个变量，根据动画介绍可以，波纹的宽度是从0到mRippleWidth，那么根据上面我们说的外圆的半径为内圆的半径+1/2(圆环)波纹的宽度，所以大圆的半径是mCircleRadius+mRippleWidth/2。****半径的变化规律知道了，只有半径的变化显然是不够的，为了达到波纹从0到mRippleWidth的效果，我们必须同步更改大圆画笔paint的strokeWidth的值，也就是画出圆环效果，strokeWidth的变化规律和波纹宽度是一样的，从0到mRippleWidth**ok,知道了半径和大圆画笔的变化规律，接下来就是按照规律去改变对应的值，然后刷新界面了，代码如下：&lt;pre&gt;`ValueAnimator va = ValueAnimator.ofInt(0, sRippleWidth);va.setDuration(RIPPLE_ANIM_DURATION * 2);va.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {    @Override    public void onAnimationUpdate(ValueAnimator animation) {        int value = (int) animation.getAnimatedValue();        mRippleWidth = value;        mRipplePaint.setStrokeWidth(value);        invalidate();    }});va.start();`&lt;/pre&gt;在初始化代码片段中，我们将外面的大圆画笔paint的strokeWidth初始化为0，颜色初始化成波纹的颜色：&lt;pre&gt;`mRipplePaint.setStyle(Paint.Style.STROKE);mRipplePaint.setStrokeWidth(0);mRipplePaint.setARGB(127, 255, 255, 255);</code></pre><p><span style="color: #ff0000;"><strong>然后根据动画的定义，我们逐渐地将画笔的宽度设置为从0到最终波纹宽度的每一个临时宽度，同时也将波纹变化过程中的的每一个临时宽度值赋值给mRippleWidth用来更新大圆的半径。然后调用invalidata()刷新界面，这样效果就出来了。</strong></span></p><p>当然还有一些细节，比如波纹宽度渐变的过程中，要伴随着alpha变化，同时要求波纹到指定时间后自动开始(这里是3000毫秒开始)，都需要我们去实现，当然这些都不是难点了，相信大家都能搞定。</p><p>就这样了，欢迎大家交流意见。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为开发launcher的桌面启动动画的时候，根据设计师的要求，需要实现一个涟漪的效果，具体效果如下：&lt;br&gt;&lt;a href=&quot;http://www.picksomething.cn/wp-content/uploads/2015/09/ezgif.com-crop.gif&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;http://www.picksomething.cn/wp-content/uploads/2015/09/ezgif.com-crop.gif&quot; alt=&quot;ezgif.com-crop&quot;&gt;&lt;/a&gt; 然后动画的具体细节要求是这样的：&lt;br&gt;&lt;a href=&quot;http://www.picksomething.cn/wp-content/uploads/2015/09/QQ20150928-2@2x.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;http://www.picksomething.cn/wp-content/uploads/2015/09/QQ20150928-2@2x-744x159.png&quot; alt=&quot;QQ20150928-2@2x&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Android" scheme="http://picksomething.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://picksomething.cn/tags/Android/"/>
    
      <category term="ripple" scheme="http://picksomething.cn/tags/ripple/"/>
    
      <category term="涟漪动画" scheme="http://picksomething.cn/tags/%E6%B6%9F%E6%BC%AA%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>来杭半年</title>
    <link href="http://picksomething.cn/2015/09/27/%E6%9D%A5%E6%9D%AD%E5%8D%8A%E5%B9%B4/"/>
    <id>http://picksomething.cn/2015/09/27/来杭半年/</id>
    <published>2015-09-26T17:53:56.000Z</published>
    <updated>2018-04-24T07:46:37.426Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>时间总是在你关注或者不关注的情况下悄悄流逝着，转眼间离上次写这篇博客(<a href="http://www.picksomething.cn/?p=230" target="_blank" rel="noopener">来杭一个月</a>)已经又过去了五个月，我来杭州也半年了。</p><p>六个月，说长也长，说不长也不长，但是多多少少都会有一些心里上的变化，也就是人们常说的所谓成长吧。</p></blockquote><p>作为一名程序员，我不擅长煽情，也不喜欢煽情，只是想简单的记录一下自己生活和心理上的变化，留着以后回头观望<br><a id="more"></a><br><strong>工作：</strong><br>来杭半年，也即是在新公司工作半年了，在小公司很多事情你都要靠自己，我也喜欢这种不断挑战自己，提升自己的感觉，目前对于自己负责业务也都很熟悉了，做起来也很得心应手，当然也还是多亏dwl的帮助和支持，深表感谢。</p><p>自己在新公司主要负责移动广告业务和小工具开发，现在偶尔也会协助dwl做一些launcher相关的开发，他一个人开发launcher的确太辛苦，而且我们公司也只有我们两个Android开发，所以只能找我帮忙了，虽然我很菜。另外打个广告，小工具目前已经开发两个了，分别是<a href="http://www.wandoujia.com/apps/com.huhulab.apkmanager" target="_blank" rel="noopener">安装包管理</a>和<a href="http://www.wandoujia.com/apps/com.huhulab.efficiencycleanup" target="_blank" rel="noopener">效率解锁清理</a>，反应大家到Android各大应用市场下载反馈</p><p>技术上这半年通过自己的努力和实践以及dwl的帮助，感觉在Android开发上有了很大的提升，和之前在深圳相比，简直是质的提升，以前遇到不会的问题，就不想去弄，觉得自己肯定解决不了，现在不一样了，现在无论设计师给什么样的设计，老板给什么样的需求，都会尽力的去做好，觉得只要细细分析，慢慢实践就一定能够搞的定。果然创业公司锻炼人，而且还是和dwl大神一起工作，这货一个人负责桌面开发，硬是一个人把我们公司的重量级产品开发出来了，而且做的还不错哦。</p><p><strong>生活：</strong><br>半年时间，只要你愿意，肯定能够对一个城市了解很多，熟悉很多。不过，我还是比较宅，周末也懒得出去，都是在我们小区和城西银泰附近消遣或者干脆在家睡懒觉。</p><p>吃，算是我和我女朋友最感兴趣的爱好了，每周都会出去吃一次或者两次大餐，城西银泰里面都快吃一个遍了，不过吃的多了，渐渐吃的那几样就固定了，比如我们半年到春暖花开吃自助餐吃了三次了，去吃炉鱼吃过好像6次了，最近这几周几乎每周都去吃，不过我觉得也挺好吃的。想其他外婆家啊，第二乐章啊，新石器烤肉啊，望湘园啊，小火锅啊也都挺好吃的。在吃上也花了不少钱。。。</p><p>住，之前说打算换房子，不过到现在还是没有换，因为我和我女朋友都是那种一旦熟悉一个地方，就懒得挪窝的人。看到我们女朋友上班还要转公交车，我很多次都说我们换个离你公司近一点的房子吧，但是她说不想换，已经对这熟悉了，觉得也挺好。所以一直都没换成，不过我觉得终究还是要换的，毕竟一是离我女朋友公司太远，二是不带个厨房着实不方便，很多时候想自己做个饭也挺麻烦的。</p><p>玩，也没什么玩的，顶多就是遇到好看的电影去看看电影，很多次我给我女朋友说周末带她去千岛湖，横店，乌镇，宋城等地方玩，她都说太累不想出去，所以来杭半年了，这些地方都还没去过。。。</p><p>好了，工作和生活也就是这样，感觉上的变化，就是觉得渐渐地融入杭州这座城市了，喜欢上这座城市了，感觉杭州挺美的，文明礼让，也都挺友好的。</p><p>不足也要说一下，就是拖延症好像越来越严重了，说的认真的学习python，ios开发，然后没学两天就放那里了，想起来了又去学两天，这样是很不对的，一定要连续的学习，不断地学习，才能不被淘汰</p><p>继续努力，完</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;时间总是在你关注或者不关注的情况下悄悄流逝着，转眼间离上次写这篇博客(&lt;a href=&quot;http://www.picksomething.cn/?p=230&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;来杭一个月&lt;/a&gt;)已经又过去了五个月，我来杭州也半年了。&lt;/p&gt;
&lt;p&gt;六个月，说长也长，说不长也不长，但是多多少少都会有一些心里上的变化，也就是人们常说的所谓成长吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为一名程序员，我不擅长煽情，也不喜欢煽情，只是想简单的记录一下自己生活和心理上的变化，留着以后回头观望&lt;br&gt;
    
    </summary>
    
      <category term="Twitter" scheme="http://picksomething.cn/categories/Twitter/"/>
    
    
      <category term="杭州" scheme="http://picksomething.cn/tags/%E6%9D%AD%E5%B7%9E/"/>
    
      <category term="半年" scheme="http://picksomething.cn/tags/%E5%8D%8A%E5%B9%B4/"/>
    
  </entry>
  
  <entry>
    <title>ImageView.getWidth返回0的问题</title>
    <link href="http://picksomething.cn/2015/08/09/ImageView.getWidth%E8%BF%94%E5%9B%9E0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://picksomething.cn/2015/08/09/ImageView.getWidth返回0的问题/</id>
    <published>2015-08-09T10:20:26.000Z</published>
    <updated>2018-04-24T07:54:46.761Z</updated>
    
    <content type="html"><![CDATA[<p>我们在为Android的ImageView控件添加动画或者根据屏幕宽高进行动态调整图片的宽高的时候，经常会用到ImageView.getWidth()来获取图片的宽高，然而遗憾的是：很多时候ImageView.getWidth()得到的结果都是0</p><ol><li><strong>Android View的绘制流程</strong></li></ol><p>基本的绘制流程大体上分为如下三个阶段：</p><pre><code>onMeasure()-onLayout()-onDraw()`&lt;/pre&gt;关于三个阶段的具体细节网上有很多讲解，简单来说:onMeasure()阶段做的主要工作就是根据父视图计算View的宽高，onLayout()阶段就是根据onMeasure()阶段计算出来的宽高，对View进行布局的摆放，根据父视图确定View的位置，onDraw()顾名思义就是在准备工作都完成，计算好宽高和位置之后进行开始真正的视图绘制工作了，一般是创建一个Canvas画布，然后在其上面draw真正的view视图，当onDraw完成之后，我们就看到了显示到手机上的各个View控件。&lt;!--more--&gt;2.  **ImageView.getWidth()返回0的原因**很多时候我们在onCreate或者onResume方法内调用ImageView.getWidth()的时候，由于布局视图太复杂，特别是View的宽高是相对值的时候(比如wrap_content或者match_parent),视图的onMeasure()和onLayout()方法并没有真正完成，也就是说并没有计算出视图的宽高，所以这个时候调用ImageView.getWidth()肯定会返回0还有就是我们如果调用View.setViewbility(View.GONE)方法，那么View的宽和高也会再次被设置为0，那么通过setVisibility(View.Visibility)之后立即调通ImageView.getWidth()，也会返回0，因为setVisibility之后，控件要重新计算大小进行绘制，在计算大小完成之前调用getWidth()一样会返回0。3.  **解决办法**附上测试的几个回调方法的执行流程&lt;pre&gt;`Activity.oncreate()→Activity.onResume()→TestImageView.onMeasure()→TestImageView.onLayout()→onGlobalLayoutListener()→Activity.onWidnowFocusChanged()→...→TextImageView.onDraw()</code></pre><p>省略的…部分可能会重复调用onMeasure-onLayout-onGlobalLayoutListener</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在为Android的ImageView控件添加动画或者根据屏幕宽高进行动态调整图片的宽高的时候，经常会用到ImageView.getWidth()来获取图片的宽高，然而遗憾的是：很多时候ImageView.getWidth()得到的结果都是0&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Android" scheme="http://picksomething.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://picksomething.cn/tags/Android/"/>
    
      <category term="View" scheme="http://picksomething.cn/tags/View/"/>
    
  </entry>
  
</feed>
